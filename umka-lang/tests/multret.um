fn f(x: int, b: bool): (int32, [2]real32, bool) {
    return -x, [2]real32{2 * x, 3 * x}, !b
}

u, v, w := 23, 45.6, "Hello"
p := 'z'

var i, j, k: [2]char = [2]char{'a', 'b'}, [2]char{'c', 'd'}, [2]char{'e', 'f'}
var l, m, n: real = 12, -3, 17

fn foo(x: int): (real, str) {
    return x + 1, sprintf("[%v]", x + 1)
}

fn test*() {
    if a, b, c := f(3, false); a < 3 {
        printf("%v %v %v\n", a, b, c)

        a, b, c = f(4, true)
        printf("%v %v %v\n", a, b, c)
    }

    a, b, c := [2]int{3, 2}, [2]int{7, 6}, [2]int{9, 8}
    printf("%v %v %v\n", a, b, c)

    a, b, c = c, a, b   
    printf("%v %v %v\n", a, b, c)

    var x, y, z: any = a, b, c
    printf("%v %v %v\n", a, b, c)

    s, t := "Hello", "World"
    printf(s + " " + t + "\n")

    s, t = t, s
    printf(s + " " + t + "\n")

    printf("%v %v %v %v\n", u, v, w, p)     
    printf("%v %v %v\n", i, j, k)
    printf("%v %v %v\n", l, m, n)

    printf("%v %v\n", foo(7).item0 + 0.5, slice(foo(42).item1, 1, 3))
}

fn main() {
    test()
}