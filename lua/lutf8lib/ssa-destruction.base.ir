extern void @lua_pushnil(ptr) !default !default
extern i32 @luaL_getmetafield(ptr, i32, ptr) !default !default
extern i32 @ungetc(i32, ptr) !default !default
extern ptr @realpath(ptr, ptr) !default !default
extern i32 @lua_resume(ptr, ptr, i32, ptr) !default !default
extern i32 @mbtowc(ptr, ptr, u64) !default !default
extern ptr @strchr(ptr, i32) !default !default
extern i32 @lua_getglobal(ptr, ptr) !default !default
extern i64 @mrand48() !default !default
extern i32 @fseek(ptr, i64, i32) !default !default
extern i32 @lua_type(ptr, i32) !default !default
extern i32 @rand() !default !default
extern ptr @lua_setupvalue(ptr, i32, i32) !default !default
extern i32 @strncmp(ptr, ptr, u64) !default !default
extern ptr @lua_pushlstring(ptr, ptr, u64) !default !default
extern ptr @fcvt(f64, i32, ptr, ptr) !default !default
extern ptr @ctermid(ptr) !default !default
extern ptr @setstate(ptr) !default !default
extern void @luaL_pushresult(ptr) !default !default
extern i32 @__xpg_strerror_r(i32, ptr, u64) !default !default
extern i32 @putchar(i32) !default !default
extern i32 @luaL_checkoption(ptr, i32, ptr, ptr) !default !default
extern i32 @getchar() !default !default
extern u32 @luaL_makeseed(ptr) !default !default
extern void @quick_exit(i32) !default !default
extern ptr @tempnam(ptr, ptr) !default !default
extern i32 @__isoc99_vfscanf(ptr, ptr, ptr) !default !default
extern void @luaL_checkstack(ptr, i32, ptr) !default !default
extern f64 @lua_tonumberx(ptr, i32, ptr) !default !default
extern ptr @lua_gethook(ptr) !default !default
extern ptr @strtok_r(ptr, ptr, ptr) !default !default
extern ptr @lua_pushfstring(ptr, ptr) !vararg !default !vararg !default
extern i32 @__isoc99_sscanf(ptr, ptr) !vararg !default !vararg !default
extern i32 @luaL_loadfilex(ptr, ptr, ptr) !default !default
extern i32 @vsscanf(ptr, ptr, ptr) !default !default
extern i32 @fileno(ptr) !default !default
extern i32 @sscanf(ptr, ptr) !vararg !default !vararg !default
extern i32 @luaopen_package(ptr) !default !default
extern i32 @luaopen_utf8(ptr) !default !default
extern ptr @initstate(u32, ptr, u64) !default !default
extern void @luaL_checkversion_(ptr, f64, u64) !default !default
extern i64 @luaL_optinteger(ptr, i32, i64) !default !default
extern i32 @luaopen_os(ptr) !default !default
extern void @funlockfile(ptr) !default !default
extern i32 @mblen(ptr, u64) !default !default
extern i32 @lua_rawget(ptr, i32) !default !default
extern i32 @luaL_argerror(ptr, i32, ptr) !default !default
extern i32 @lua_gethookmask(ptr) !default !default
extern i32 @luaL_newmetatable(ptr, ptr) !default !default
extern i64 @nrand48(ptr) !default !default
extern void @free(ptr) !default !default
extern void @__assert_perror_fail(i32, ptr, u32, ptr) !default !default
extern ptr @getenv(ptr) !default !default
extern i32 @putchar_unlocked(i32) !default !default
extern ptr @luaL_buffinitsize(ptr, ptr, u64) !default !default
extern i32 @lua_isuserdata(ptr, i32) !default !default
extern ptr @mktemp(ptr) !default !default
extern void @lua_arith(ptr, i32) !default !default
extern i32 @vfscanf(ptr, ptr, ptr) !default !default
extern i32 @lua_gc(ptr, i32) !vararg !default !vararg !default
extern i32 @fprintf(ptr, ptr) !vararg !default !vararg !default
extern i32 @luaopen_debug(ptr) !default !default
extern i32 @lua_isstring(ptr, i32) !default !default
extern void @lua_rawseti(ptr, i32, i64) !default !default
extern i32 @fscanf(ptr, ptr) !vararg !default !vararg !default
extern i32 @__isoc99_fscanf(ptr, ptr) !vararg !default !vararg !default
extern void @luaL_setmetatable(ptr, ptr) !default !default
extern i32 @abs(i32) !default !default
extern i32 @__isoc99_vsscanf(ptr, ptr, ptr) !default !default
extern ptr @memcpy(ptr, ptr, u64) !default !default
extern void @lua_rawsetp(ptr, i32, ptr) !default !default
extern i32 @lua_isyieldable(ptr) !default !default
extern void @lua_concat(ptr, i32) !default !default
extern void @lua_copy(ptr, i32, i32) !default !default
extern ptr @lua_getupvalue(ptr, i32, i32) !default !default
extern f64 @luaL_checknumber(ptr, i32) !default !default
extern i64 @ftello64(ptr) !default !default
extern void @luaL_checkany(ptr, i32) !default !default
extern ptr @strpbrk(ptr, ptr) !default !default
extern ptr @tmpnam(ptr) !default !default
extern u64 @strxfrm(ptr, ptr, u64) !default !default
extern ptr @realloc(ptr, u64) !default !default
extern i32 @lua_isnumber(ptr, i32) !default !default
extern ptr @fgets(ptr, i32, ptr) !default !default
extern i32 @sprintf(ptr, ptr) !vararg !default !vararg !default
extern i64 @div(i32, i32) !default !default
extern i64 @atoll(ptr) !default !default
extern u64 @strlen(ptr) !default !default
extern i32 @memcmp(ptr, ptr, u64) !default !default
extern i64 @lua_tointegerx(ptr, i32, ptr) !default !default
extern i32 @lua_geti(ptr, i32, i64) !default !default
extern i32 @grantpt(i32) !default !default
extern void @lua_upvaluejoin(ptr, i32, i32, i32, i32) !default !default
extern ptr @bsearch(ptr, ptr, u64, u64, ptr) !default !default
extern |i64, i64| @ldiv(i64, i64) !default !default
extern void @flockfile(ptr) !default !default
extern i32 @lua_iscfunction(ptr, i32) !default !default
extern i32 @vsprintf(ptr, ptr, ptr) !default !default
extern void @luaL_traceback(ptr, ptr, ptr, i32) !default !default
extern i32 @luaL_getsubtable(ptr, i32, ptr) !default !default
extern i32 @at_quick_exit(ptr) !default !default
extern i32 @wctomb(ptr, i32) !default !default
extern ptr @gcvt(f64, i32, ptr) !default !default
extern i32 @lua_compare(ptr, i32, i32, i32) !default !default
extern ptr @strerror(i32) !default !default
extern i32 @ferror(ptr) !default !default
extern i64 @luaL_len(ptr, i32) !default !default
extern i64 @labs(i64) !default !default
extern void @abort() !default !default
extern ptr @strstr(ptr, ptr) !default !default
extern ptr @lua_newstate(ptr, ptr, u32) !default !default
extern ptr @luaL_prepbuffsize(ptr, u64) !default !default
extern i32 @putenv(ptr) !default !default
extern ptr @lua_tothread(ptr, i32) !default !default
extern i32 @lua_getstack(ptr, i32, ptr) !default !default
extern ptr @freopen64(ptr, ptr, ptr) !default !default
extern void @lua_closeslot(ptr, i32) !default !default
extern ptr @luaL_optlstring(ptr, i32, ptr, ptr) !default !default
extern i64 @ftell(ptr) !default !default
extern i32 @luaopen_table(ptr) !default !default
extern i32 @rand_r(ptr) !default !default
extern ptr @calloc(u64, u64) !default !default
extern i32 @lua_status(ptr) !default !default
extern ptr @lua_atpanic(ptr, ptr) !default !default
extern ptr @ptsname(i32) !default !default
extern void @lua_setglobal(ptr, ptr) !default !default
extern i32 @remove(ptr) !default !default
extern f64 @drand48() !default !default
extern i32 @printf(ptr) !vararg !default !vararg !default
extern ptr @strcat(ptr, ptr) !default !default
extern i64 @random() !default !default
extern i32 @lua_yieldk(ptr, i32, i64, ptr) !default !default
extern void @setbuf(ptr, ptr) !default !default
extern i32 @getchar_unlocked() !default !default
extern i64 @llabs(i64) !default !default
extern void @lua_setallocf(ptr, ptr, ptr) !default !default
extern ptr @lua_pushstring(ptr, ptr) !default !default
extern i32 @fgetpos64(ptr, ptr) !default !default
extern i32 @lua_getmetatable(ptr, i32) !default !default
extern ptr @luaL_testudata(ptr, i32, ptr) !default !default
extern void @srand48(i64) !default !default
extern void @clearerr(ptr) !default !default
extern i32 @lua_error(ptr) !default !default
extern ptr @popen(ptr, ptr) !default !default
extern f64 @erand48(ptr) !default !default
extern ptr @lua_tocfunction(ptr, i32) !default !default
extern i32 @fclose(ptr) !default !default
extern u64 @__ctype_get_mb_cur_max() !default !default
extern i32 @lua_gethookcount(ptr) !default !default
extern f64 @lua_version(ptr) !default !default
extern i32 @lua_dump(ptr, ptr, ptr, i32) !default !default
extern void @rewind(ptr) !default !default
extern void @luaL_buffinit(ptr, ptr) !default !default
extern i32 @ftrylockfile(ptr) !default !default
extern i32 @feof(ptr) !default !default
extern void @lua_toclose(ptr, i32) !default !default
extern i32 @vprintf(ptr, ptr) !default !default
extern ptr @strdup(ptr) !default !default
extern i32 @luaL_callmeta(ptr, i32, ptr) !default !default
extern i32 @fgetc(ptr) !default !default
extern ptr @lua_topointer(ptr, i32) !default !default
extern void @lua_seti(ptr, i32, i64) !default !default
extern i32 @putc(i32, ptr) !default !default
extern void @luaL_unref(ptr, i32, i32) !default !default
extern i32 @lua_isinteger(ptr, i32) !default !default
extern u32 @lua_numbertocstring(ptr, i32, ptr) !default !default
extern i32 @mkstemp64(ptr) !default !default
extern void @lua_len(ptr, i32) !default !default
extern void @lua_callk(ptr, i32, i32, i64, ptr) !default !default
extern i32 @posix_memalign(ptr, u64, u64) !default !default
extern ptr @lua_getlocal(ptr, ptr, i32) !default !default
extern i32 @scanf(ptr) !vararg !default !vararg !default
extern i32 @luaopen_io(ptr) !default !default
extern i32 @vscanf(ptr, ptr) !default !default
extern ptr @strcpy(ptr, ptr) !default !default
extern u64 @lua_rawlen(ptr, i32) !default !default
extern void @lua_pushinteger(ptr, i64) !default !default
extern ptr @fopen64(ptr, ptr) !default !default
extern void @luaL_addgsub(ptr, ptr, ptr, ptr) !default !default
extern i32 @lua_getfield(ptr, i32, ptr) !default !default
extern i32 @vfprintf(ptr, ptr, ptr) !default !default
extern ptr @luaL_checkudata(ptr, i32, ptr) !default !default
extern ptr @lua_pushvfstring(ptr, ptr, ptr) !default !default
extern void @luaL_addvalue(ptr) !default !default
extern i32 @unlockpt(i32) !default !default
extern i32 @lua_toboolean(ptr, i32) !default !default
extern u64 @fread(ptr, u64, u64, ptr) !default !default
extern void @luaL_addlstring(ptr, ptr, u64) !default !default
extern void @exit(i32) !default !default
extern ptr @memccpy(ptr, ptr, i32, u64) !default !default
extern i32 @luaL_ref(ptr, i32) !default !default
extern ptr @lua_upvalueid(ptr, i32, i32) !default !default
extern i32 @system(ptr) !default !default
extern i64 @jrand48(ptr) !default !default
extern |i64, i64| @lldiv(i64, i64) !default !default
extern u64 @strspn(ptr, ptr) !default !default
extern void @lua_pushboolean(ptr, i32) !default !default
extern void @__assert(ptr, ptr, i32) !default !default
extern void @lua_close(ptr) !default !default
extern i64 @strtoll(ptr, ptr, i32) !default !default
extern void @lua_settable(ptr, i32) !default !default
extern void @__assert_fail(ptr, ptr, u32, ptr) !default !default
extern i32 @lua_gettable(ptr, i32) !default !default
extern f64 @strtold(ptr, ptr) !default !default
extern ptr @lua_typename(ptr, i32) !default !default
extern i32 @lua_pcallk(ptr, i32, i32, i32, i64, ptr) !default !default
extern i64 @a64l(ptr) !default !default
extern void @lua_pushcclosure(ptr, ptr, i32) !default !default
extern ptr @l64a(i64) !default !default
extern void @_Exit(i32) !default !default
extern i32 @fputc(i32, ptr) !default !default
extern i32 @setenv(ptr, ptr, i32) !default !default
extern i32 @pclose(ptr) !default !default
extern i32 @lua_closethread(ptr, ptr) !default !default
extern ptr @seed48(ptr) !default !default
extern i32 @strcoll(ptr, ptr) !default !default
extern u64 @strtoull(ptr, ptr, i32) !default !default
extern void @lua_pushlightuserdata(ptr, ptr) !default !default
extern void @lua_setfield(ptr, i32, ptr) !default !default
extern i64 @strtol(ptr, ptr, i32) !default !default
extern f64 @luaL_optnumber(ptr, i32, f64) !default !default
extern void @luaL_addstring(ptr, ptr) !default !default
extern i32 @lua_absindex(ptr, i32) !default !default
extern i32 @luaopen_coroutine(ptr) !default !default
extern void @lua_rotate(ptr, i32, i32) !default !default
extern i32 @luaL_loadbufferx(ptr, ptr, u64, ptr, ptr) !default !default
extern ptr @aligned_alloc(u64, u64) !default !default
extern i32 @atoi(ptr) !default !default
extern ptr @malloc(u64) !default !default
extern f64 @atof(ptr) !default !default
extern i32 @__uflow(ptr) !default !default
extern i32 @puts(ptr) !default !default
extern ptr @lua_setlocal(ptr, ptr, i32) !default !default
extern i32 @rename(ptr, ptr) !default !default
extern ptr @strrchr(ptr, i32) !default !default
extern i32 @fputs(ptr, ptr) !default !default
extern ptr @memchr(ptr, i32, u64) !default !default
extern void @lua_rawset(ptr, i32) !default !default
extern i32 @lua_rawequal(ptr, i32, i32) !default !default
extern void @perror(ptr) !default !default
extern i64 @atol(ptr) !default !default
extern i32 @fflush(ptr) !default !default
extern ptr @strncat(ptr, ptr, u64) !default !default
extern i32 @lua_setmetatable(ptr, i32) !default !default
extern void @srandom(u32) !default !default
extern i64 @luaL_checkinteger(ptr, i32) !default !default
extern void @luaL_setfuncs(ptr, ptr, i32) !default !default
extern ptr @luaL_checklstring(ptr, i32, ptr) !default !default
extern void @srand(u32) !default !default
extern i32 @luaL_error(ptr, ptr) !vararg !default !vararg !default
extern i32 @luaopen_math(ptr) !default !default
extern void @luaL_openselectedlibs(ptr, i32, i32) !default !default
extern void @lua_pushnumber(ptr, f64) !default !default
extern ptr @lua_getallocf(ptr, ptr) !default !default
extern i32 @__memcmpeq(ptr, ptr, u64) !default !default
extern i32 @strcmp(ptr, ptr) !default !default
extern i32 @lua_getinfo(ptr, ptr, ptr) !default !default
extern ptr @luaL_gsub(ptr, ptr, ptr, ptr) !default !default
extern ptr @lua_newthread(ptr) !default !default
extern u64 @lua_stringtonumber(ptr, ptr) !default !default
extern ptr @strtok(ptr, ptr) !default !default
extern f64 @strtod(ptr, ptr) !default !default
extern ptr @__strtok_r(ptr, ptr, ptr) !default !default
extern void @lua_xmove(ptr, ptr, i32) !default !default
extern ptr @lua_touserdata(ptr, i32) !default !default
extern void @luaL_checktype(ptr, i32, i32) !default !default
extern f32 @strtof(ptr, ptr) !default !default
extern ptr @memset(ptr, i32, u64) !default !default
extern i32 @luaL_loadstring(ptr, ptr) !default !default
extern i32 @__isoc99_vscanf(ptr, ptr) !default !default
extern i32 @getc_unlocked(ptr) !default !default
extern void @lcong48(ptr) !default !default
extern ptr @memmove(ptr, ptr, u64) !default !default
extern ptr @tmpfile64() !default !default
extern i32 @posix_openpt(i32) !default !default
extern void @lua_createtable(ptr, i32, i32) !default !default
extern i32 @luaopen_string(ptr) !default !default
extern ptr @lua_newuserdatauv(ptr, u64, i32) !default !default
extern void @lua_setwarnf(ptr, ptr, ptr) !default !default
extern void @luaL_pushresultsize(ptr, u64) !default !default
extern i32 @setvbuf(ptr, ptr, i32, u64) !default !default
extern i32 @luaopen_base(ptr) !default !default
extern i32 @luaL_fileresult(ptr, i32, ptr) !default !default
extern i32 @getsubopt(ptr, ptr, ptr) !default !default
extern i32 @lua_getiuservalue(ptr, i32, i32) !default !default
extern i32 @fsetpos64(ptr, ptr) !default !default
extern i32 @atexit(ptr) !default !default
extern ptr @fdopen(i32, ptr) !default !default
extern u64 @strcspn(ptr, ptr) !default !default
extern void @luaL_requiref(ptr, ptr, ptr, i32) !default !default
extern i32 @luaL_execresult(ptr, i32) !default !default
extern i32 @lua_pushthread(ptr) !default !default
extern i32 @__isoc99_scanf(ptr) !vararg !default !vararg !default
extern i32 @luaL_typeerror(ptr, i32, ptr) !default !default
extern i32 @putc_unlocked(i32, ptr) !default !default
extern u64 @wcstombs(ptr, ptr, u64) !default !default
extern ptr @lua_pushexternalstring(ptr, ptr, u64, ptr, ptr) !default !default
extern i32 @__overflow(ptr, i32) !default !default
extern u64 @strtoul(ptr, ptr, i32) !default !default
extern u64 @mbstowcs(ptr, ptr, u64) !default !default
extern void @lua_warning(ptr, ptr, i32) !default !default
extern void @lua_pushvalue(ptr, i32) !default !default
extern i32 @vsnprintf(ptr, u64, ptr, ptr) !default !default
extern void @lua_settop(ptr, i32) !default !default
extern void @lua_sethook(ptr, ptr, i32, i32) !default !default
extern i32 @snprintf(ptr, u64, ptr) !vararg !default !vararg !default
extern ptr @lua_tolstring(ptr, i32, ptr) !default !default
extern void @qsort(ptr, u64, u64, ptr) !default !default
extern i64 @lrand48() !default !default
extern i32 @lua_load(ptr, ptr, ptr, ptr, ptr) !default !default
extern i32 @lua_rawgeti(ptr, i32, i64) !default !default
extern i32 @lua_rawgetp(ptr, i32, ptr) !default !default
extern i32 @lua_setiuservalue(ptr, i32, i32) !default !default
extern u64 @fwrite(ptr, u64, u64, ptr) !default !default
extern i32 @lua_gettop(ptr) !default !default
extern i32 @fseeko64(ptr, i64, i32) !default !default
extern i32 @lua_checkstack(ptr, i32) !default !default
extern ptr @ecvt(f64, i32, ptr, ptr) !default !default
extern ptr @luaL_tolstring(ptr, i32, ptr) !default !default
extern void @luaL_where(ptr, i32) !default !default
extern i32 @lua_next(ptr, i32) !default !default
extern ptr @strncpy(ptr, ptr, u64) !default !default
extern i32 @unsetenv(ptr) !default !default
extern i32 @getc(ptr) !default !default
extern ptr @luaL_newstate() !default !default

$luaL_Reg = type {ptr, ptr}
$union.35 = type {<i8 x 1024>}
$luaL_Buffer = type {ptr, u64, u64, ptr, $union.35}

@.str17 = constant <i8 x 3> "len"
@.str16 = constant <i8 x 4> "char"
@.str19 = constant <i8 x 11> "charpattern"
@.str18 = constant <i8 x 5> "codes"
@.str9 = constant <i8 x 2> "%U"
@.str7 = constant <i8 x 18> "invalid UTF-8 code"
@.str11 = constant <i8 x 39> "initial position is a continuation byte"
@.str22 = constant <i8 x 11> "charpattern"
@.str8 = constant <i8 x 18> "value out of range"
@.str10 = constant <i8 x 22> "position out of bounds"
@.str21 = constant <i8 x 29> "[\0-\\x7F\\xC2-\\xFD][\\x80-\\xBF]*"
@.str5 = constant <i8 x 21> "string slice too long"
@.str13 = constant <i8 x 18> "invalid UTF-8 code"
@.str6 = constant <i8 x 21> "string slice too long"
@.str12 = constant <i8 x 18> "invalid UTF-8 code"
@.str3 = constant <i8 x 13> "out of bounds"
@.str15 = constant <i8 x 9> "codepoint"
@.str4 = constant <i8 x 13> "out of bounds"
@.str14 = constant <i8 x 6> "offset"
@.str1 = constant <i8 x 30> "initial position out of bounds"
@.str2 = constant <i8 x 28> "final position out of bounds"

@stdin = extern global ptr
@stdout = extern global ptr
@stderr = extern global ptr
@.limits.static0 = global <u32 x 6> {-1, 128, 2048, 65536, 2097152, 67108864} !!internal
@.funcs.static20 = global <$luaL_Reg x 7> {{.str14, byteoffset}, {.str15, codepoint}, {.str16, utfchar}, {.str17, utflen}, {.str18, iter_codes}, {.str19, null}, {null, null}} !!internal

define i32 @byteoffset(%arg0:ptr) !internal {
entry:	
[rdi]	%0x6 = copy ptr %arg0
[-8(%rbp)]	%0x11 = gen ptr
	move ptr %0x11 %0x6
[-12(%rbp)]	%0x13 = gen i32
[-24(%rbp)]	%0x14 = gen u64
[rdi]	%0x15 = copy ptr %0x11
	downstackframe [ptr @luaL_checklstring(ptr, i32, ptr) !default]
[rdi]	%0x8 = copy ptr %0x15
[rsi]	%0x9 = copy i32 1
[rdx]	%0x16 = lea ptr %0x14
[rdi]	%0x5 = call ptr @luaL_checklstring(%0x8:ptr, %0x9:i32, %0x16:ptr) bt label %L2
L2:	; pred=entry
	upstackframe [ptr @luaL_checklstring(ptr, i32, ptr) !default]
[-32(%rbp)]	%2x8 = gen ptr
	move ptr %2x8 %0x5
[rdi]	%2x10 = copy ptr %0x11
	downstackframe [i64 @luaL_checkinteger(ptr, i32) !default]
[rdi]	%2x6 = copy ptr %2x10
[rsi]	%2x7 = copy i32 2
[rdi]	%2x3 = call i64 @luaL_checkinteger(%2x6:ptr, %2x7:i32) bt label %L3
L3:	; pred=L2
	upstackframe [i64 @luaL_checkinteger(ptr, i32) !default]
[-40(%rbp)]	%3x6 = gen i64
	move i64 %3x6 %2x3
[rdi]	%3x8 = copy i64 %3x6
	%3x3 = icmp ge i64 %3x8, 0
	br u1 %3x3 label %L4, label %L5 
L4:	; pred=L3
[r15]	%4x0 = copy i64 1
	br label %L6
L6:	; pred=L4, L5
[r15]	%6x0 = phi i64 [%4x0: L4, %5x3: L5]
[rdi]	%6x1 = copy i64 %6x0
[-48(%rbp)]	%6x11 = gen i64
	move i64 %6x11 %6x1
[rdi]	%6x13 = copy ptr %0x11
[r14]	%6x14 = copy i64 %6x11
	downstackframe [i64 @luaL_optinteger(ptr, i32, i64) !default]
[rdi]	%6x8 = copy ptr %6x13
[rsi]	%6x9 = copy i32 3
[rdx]	%6x10 = copy i64 %6x14
[r14]	%6x6 = call i64 @luaL_optinteger(%6x8:ptr, %6x9:i32, %6x10:i64) bt label %L7
L7:	; pred=L6
	upstackframe [i64 @luaL_optinteger(ptr, i32, i64) !default]
[r13]	%7x6 = copy u64 %0x14
	downstackframe [i64 @u_posrelat(i64, u64) !internal]
[rdi]	%7x4 = copy i64 %6x6
[rsi]	%7x5 = copy u64 %7x6
[r13]	%7x1 = call i64 @u_posrelat(%7x4:i64, %7x5:u64) bt label %L8
L8:	; pred=L7
	upstackframe [i64 @u_posrelat(i64, u64) !internal]
	move i64 %6x11 %7x1
[r13]	%8x6 = copy i64 %6x11
	%8x2 = icmp le i64 1, %8x6
	br u1 %8x2 label %L9, label %L62 
L9:	; pred=L8
[r13]	%9x9 = copy i64 %6x11
[r13]	%9x1 = sub i64 %9x9, 1
	move i64 %6x11 %9x1
[r14]	%9x11 = copy u64 %0x14
[r14]	%9x4 = bitcast u64 %9x11 to i64
	%9x5 = icmp le i64 %9x1, %9x4
[r14]	%9x6 = flag2int u1 %9x5 to i8
[r14]	%9x7 = copy i8 %9x6
	br label %L10
L10:	; pred=L9, L62
[r14]	%10x0 = phi i8 [%62x0: L62, %9x7: L9]
[r13]	%10x1 = copy i8 %10x0
	%10x2 = icmp ne i8 %10x1, 0
	br u1 %10x2 label %L63, label %L11 
L63:	; pred=L10
[r13]	%63x0 = copy i8 1
	br label %L12
L12:	; pred=L13, L63
[r13]	%12x0 = phi i8 [%63x0: L63, %13x2: L13]
[rdi]	%12x1 = copy i8 %12x0
[rdi]	%12x5 = copy i64 %3x6
	%12x3 = icmp eq i64 %12x5, 0
	br u1 %12x3 label %L14, label %L15 
L14:	; pred=L12
	br label %L17
L17:	; pred=L14, L16
[rdi]	%17x3 = copy i64 %6x11
	%17x1 = icmp gt i64 %17x3, 0
	br u1 %17x1 label %L18, label %L56 
L18:	; pred=L17
[rdi]	%18x13 = copy ptr %2x8
[rdi]	%18x1 = ptr2int ptr %18x13 to i64
[r12]	%18x14 = copy i64 %6x11
[r12]	%18x3 = mul i64 %18x14, 1
[r12]	%18x4 = add i64 %18x1, %18x3
[r12]	%18x5 = int2ptr i64 %18x4 to ptr
[r12]	%18x6 = load i8 %18x5
[r12]	%18x7 = sext i8 %18x6 to i32
[r12]	%18x8 = and i32 %18x7, 192
	%18x9 = icmp eq i32 %18x8, 128
[r12]	%18x10 = flag2int u1 %18x9 to i8
[r12]	%18x11 = copy i8 %18x10
	br label %L19
L19:	; pred=L18, L56
[r12]	%19x0 = phi i8 [%56x0: L56, %18x11: L18]
[rdi]	%19x1 = copy i8 %19x0
	%19x2 = icmp ne i8 %19x1, 0
	br u1 %19x2 label %L16, label %L20 
L16:	; pred=L19
[rdi]	%16x4 = copy i64 %6x11
[rdi]	%16x1 = sub i64 %16x4, 1
	move i64 %6x11 %16x1
	br label %L17
L20:	; pred=L19
	br label %L21
L21:	; pred=L20, L37
[rdi]	%21x3 = copy i64 %3x6
	%21x1 = icmp ne i64 %21x3, 0
	br u1 %21x1 label %L46, label %L47 
L46:	; pred=L21
[rdi]	%46x4 = copy ptr %0x11
	downstackframe [void @lua_pushnil(ptr) !default]
[rdi]	%46x3 = copy ptr %46x4
	call void @lua_pushnil(%46x3:ptr) bt label %L48
L48:	; pred=L46
	upstackframe [void @lua_pushnil(ptr) !default]
	move i32 %0x13 1
	br label %L1
L47:	; pred=L21
[rdi]	%47x7 = copy ptr %0x11
[r11]	%47x8 = copy i64 %6x11
[r11]	%47x2 = add i64 %47x8, 1
	downstackframe [void @lua_pushinteger(ptr, i64) !default]
[rdi]	%47x5 = copy ptr %47x7
[rsi]	%47x6 = copy i64 %47x2
	call void @lua_pushinteger(%47x5:ptr, %47x6:i64) bt label %L49
L49:	; pred=L47
	upstackframe [void @lua_pushinteger(ptr, i64) !default]
[r11]	%49x9 = copy i64 %6x11
[rdi]	%49x10 = copy ptr %2x8
[rdi]	%49x11 = indexedLoad i8 %49x10, i64 %49x9
[rdi]	%49x4 = sext i8 %49x11 to i32
[rdi]	%49x5 = and i32 %49x4, 128
	%49x6 = icmp ne i32 %49x5, 0
	br u1 %49x6 label %L50, label %L58 
L50:	; pred=L49
	br label %L52
L52:	; pred=L50, L60
[rdi]	%52x4 = copy i64 %6x11
[rdi]	%52x1 = add i64 %52x4, 1
	move i64 %6x11 %52x1
	br label %L53
L53:	; pred=L52
[rdi]	%53x15 = copy ptr %2x8
[rdi]	%53x1 = ptr2int ptr %53x15 to i64
[r11]	%53x16 = copy i64 %6x11
[r11]	%53x3 = mul i64 %53x16, 1
[r11]	%53x4 = add i64 %53x1, %53x3
[r11]	%53x5 = int2ptr i64 %53x4 to ptr
[r11]	%53x6 = ptr2int ptr %53x5 to i64
[rdi]	%53x7 = mul i64 1, 1
[rdi]	%53x8 = add i64 %53x6, %53x7
[rdi]	%53x9 = int2ptr i64 %53x8 to ptr
[rdi]	%53x10 = load i8 %53x9
[rdi]	%53x11 = sext i8 %53x10 to i32
[rdi]	%53x12 = and i32 %53x11, 192
	%53x13 = icmp eq i32 %53x12, 128
	br u1 %53x13 label %L60, label %L54 
L60:	; pred=L53
	br label %L52
L54:	; pred=L53
	br label %L51
L51:	; pred=L54, L58
[rdi]	%51x7 = copy ptr %0x11
[r11]	%51x8 = copy i64 %6x11
[r11]	%51x2 = add i64 %51x8, 1
	downstackframe [void @lua_pushinteger(ptr, i64) !default]
[rdi]	%51x5 = copy ptr %51x7
[rsi]	%51x6 = copy i64 %51x2
	call void @lua_pushinteger(%51x5:ptr, %51x6:i64) bt label %L55
L55:	; pred=L51
	upstackframe [void @lua_pushinteger(ptr, i64) !default]
	move i32 %0x13 2
	br label %L1
L58:	; pred=L49
	br label %L51
L56:	; pred=L17
[r12]	%56x0 = copy i8 0
	br label %L19
L15:	; pred=L12
[r11]	%15x11 = copy ptr %2x8
[r11]	%15x1 = ptr2int ptr %15x11 to i64
[rdi]	%15x12 = copy i64 %6x11
[rdi]	%15x3 = mul i64 %15x12, 1
[rdi]	%15x4 = add i64 %15x1, %15x3
[rdi]	%15x5 = int2ptr i64 %15x4 to ptr
[rdi]	%15x6 = load i8 %15x5
[rdi]	%15x7 = sext i8 %15x6 to i32
[rdi]	%15x8 = and i32 %15x7, 192
	%15x9 = icmp eq i32 %15x8, 128
	br u1 %15x9 label %L22, label %L23 
L22:	; pred=L15
[rdi]	%22x5 = copy ptr %0x11
	downstackframe [i32 @luaL_error(ptr, ptr) !vararg !default]
[rdi]	%22x3 = copy ptr %22x5
[rsi]	%22x6 = lea ptr @.str11
[rdi]	%22x1 = call i32 @luaL_error(%22x3:ptr, %22x6:ptr) bt label %L24
L24:	; pred=L22
	upstackframe [i32 @luaL_error(ptr, ptr) !vararg !default]
	move i32 %0x13 %22x1
	br label %L1
L23:	; pred=L15
[rdi]	%23x3 = copy i64 %3x6
	%23x1 = icmp lt i64 %23x3, 0
	br u1 %23x1 label %L25, label %L26 
L25:	; pred=L23
	br label %L28
L28:	; pred=L25, L36
[rdi]	%28x3 = copy i64 %3x6
	%28x1 = icmp lt i64 %28x3, 0
	br u1 %28x1 label %L29, label %L64 
L29:	; pred=L28
[rdi]	%29x5 = copy i64 %6x11
	%29x1 = icmp gt i64 %29x5, 0
[rdi]	%29x2 = flag2int u1 %29x1 to i8
[rdi]	%29x3 = copy i8 %29x2
	br label %L30
L30:	; pred=L29, L64
[rdi]	%30x0 = phi i8 [%64x0: L64, %29x3: L29]
[r11]	%30x1 = copy i8 %30x0
	%30x2 = icmp ne i8 %30x1, 0
	br u1 %30x2 label %L27, label %L31 
L27:	; pred=L30
	br label %L32
L32:	; pred=L27, L59
[r11]	%32x4 = copy i64 %6x11
[r11]	%32x1 = sub i64 %32x4, 1
	move i64 %6x11 %32x1
	br label %L33
L33:	; pred=L32
[r11]	%33x3 = copy i64 %6x11
	%33x1 = icmp gt i64 %33x3, 0
	br u1 %33x1 label %L34, label %L57 
L34:	; pred=L33
[r11]	%34x13 = copy ptr %2x8
[r11]	%34x1 = ptr2int ptr %34x13 to i64
[r12]	%34x14 = copy i64 %6x11
[r12]	%34x3 = mul i64 %34x14, 1
[r12]	%34x4 = add i64 %34x1, %34x3
[r12]	%34x5 = int2ptr i64 %34x4 to ptr
[r12]	%34x6 = load i8 %34x5
[r12]	%34x7 = sext i8 %34x6 to i32
[r12]	%34x8 = and i32 %34x7, 192
	%34x9 = icmp eq i32 %34x8, 128
[r12]	%34x10 = flag2int u1 %34x9 to i8
[r12]	%34x11 = copy i8 %34x10
	br label %L35
L35:	; pred=L34, L57
[r12]	%35x0 = phi i8 [%57x0: L57, %34x11: L34]
[r11]	%35x1 = copy i8 %35x0
	%35x2 = icmp ne i8 %35x1, 0
	br u1 %35x2 label %L59, label %L36 
L59:	; pred=L35
	br label %L32
L36:	; pred=L35
[r11]	%36x4 = copy i64 %3x6
[r11]	%36x1 = add i64 %36x4, 1
	move i64 %3x6 %36x1
	br label %L28
L57:	; pred=L33
[r12]	%57x0 = copy i8 0
	br label %L35
L31:	; pred=L30
	br label %L37
L37:	; pred=L31, L42
	br label %L21
L64:	; pred=L28
[rdi]	%64x0 = copy i8 0
	br label %L30
L26:	; pred=L23
[r11]	%26x4 = copy i64 %3x6
[r11]	%26x1 = sub i64 %26x4, 1
	move i64 %3x6 %26x1
	br label %L39
L39:	; pred=L26, L45
[r11]	%39x3 = copy i64 %3x6
	%39x1 = icmp gt i64 %39x3, 0
	br u1 %39x1 label %L40, label %L61 
L40:	; pred=L39
[r11]	%40x7 = copy i64 %6x11
[r12]	%40x8 = copy u64 %0x14
[r12]	%40x2 = bitcast u64 %40x8 to i64
	%40x3 = icmp lt i64 %40x7, %40x2
[r12]	%40x4 = flag2int u1 %40x3 to i8
[r12]	%40x5 = copy i8 %40x4
	br label %L41
L41:	; pred=L40, L61
[r12]	%41x0 = phi i8 [%61x0: L61, %40x5: L40]
[r11]	%41x1 = copy i8 %41x0
	%41x2 = icmp ne i8 %41x1, 0
	br u1 %41x2 label %L38, label %L42 
L38:	; pred=L41
	br label %L43
L43:	; pred=L38, L65
[r11]	%43x4 = copy i64 %6x11
[r11]	%43x1 = add i64 %43x4, 1
	move i64 %6x11 %43x1
	br label %L44
L44:	; pred=L43
[r11]	%44x11 = copy ptr %2x8
[r11]	%44x1 = ptr2int ptr %44x11 to i64
[rdi]	%44x12 = copy i64 %6x11
[rdi]	%44x3 = mul i64 %44x12, 1
[rdi]	%44x4 = add i64 %44x1, %44x3
[rdi]	%44x5 = int2ptr i64 %44x4 to ptr
[rdi]	%44x6 = load i8 %44x5
[rdi]	%44x7 = sext i8 %44x6 to i32
[rdi]	%44x8 = and i32 %44x7, 192
	%44x9 = icmp eq i32 %44x8, 128
	br u1 %44x9 label %L65, label %L45 
L65:	; pred=L44
	br label %L43
L45:	; pred=L44
[rdi]	%45x4 = copy i64 %3x6
[rdi]	%45x1 = sub i64 %45x4, 1
	move i64 %3x6 %45x1
	br label %L39
L42:	; pred=L41
	br label %L37
L61:	; pred=L39
[r12]	%61x0 = copy i8 0
	br label %L41
L11:	; pred=L10
[rdi]	%11x6 = copy ptr %0x11
	downstackframe [i32 @luaL_argerror(ptr, i32, ptr) !default]
[rdi]	%11x3 = copy ptr %11x6
[rsi]	%11x4 = copy i32 3
[rdx]	%11x7 = lea ptr @.str10
[rdi]	%11x1 = call i32 @luaL_argerror(%11x3:ptr, %11x4:i32, %11x7:ptr) bt label %L13
L13:	; pred=L11
	upstackframe [i32 @luaL_argerror(ptr, i32, ptr) !default]
	%13x0 = icmp ne i32 %11x1, 0
[rdi]	%13x1 = flag2int u1 %13x0 to i8
[r13]	%13x2 = copy i8 %13x1
	br label %L12
L62:	; pred=L8
[r14]	%62x0 = copy i8 0
	br label %L10
L5:	; pred=L3
[rdi]	%5x5 = copy u64 %0x14
[rdi]	%5x1 = bitcast u64 %5x5 to i64
[rdi]	%5x2 = add i64 %5x1, 1
[r15]	%5x3 = copy i64 %5x2
	br label %L6
L1:	; pred=L24, L48, L55
[rdi]	%1x2 = copy i32 %0x13
	ret i32 %1x2
}

define i64 @u_posrelat(%arg0:i64, %arg1:u64) !internal {
entry:	
[rsi]	%0x9 = copy u64 %arg1
[rdi]	%0x8 = copy i64 %arg0
[-8(%rbp)]	%0x10 = gen i64
	move i64 %0x10 %0x8
[-16(%rbp)]	%0x12 = gen u64
	move u64 %0x12 %0x9
[-24(%rbp)]	%0x14 = gen i64
[rsi]	%0x15 = copy i64 %0x10
	%0x6 = icmp ge i64 %0x15, 0
	br u1 %0x6 label %L2, label %L3 
L2:	; pred=entry
[rsi]	%2x3 = copy i64 %0x10
	move i64 %0x14 %2x3
	br label %L1
L3:	; pred=entry
[rsi]	%3x6 = copy i64 %0x10
[rsi]	%3x1 = bitcast i64 %3x6 to u64
[rsi]	%3x2 = sub u64 0, %3x1
[rdi]	%3x7 = copy u64 %0x12
	%3x4 = icmp gt u64 %3x2, %3x7
	br u1 %3x4 label %L4, label %L5 
L4:	; pred=L3
	move i64 %0x14 0
	br label %L1
L5:	; pred=L3
[rdi]	%5x7 = copy u64 %0x12
[rdi]	%5x1 = bitcast u64 %5x7 to i64
[rsi]	%5x8 = copy i64 %0x10
[rsi]	%5x3 = add i64 %5x1, %5x8
[rsi]	%5x4 = add i64 %5x3, 1
	move i64 %0x14 %5x4
	br label %L1
L1:	; pred=L2, L4, L5
[rsi]	%1x2 = copy i64 %0x14
	ret i64 %1x2
}

define i32 @codepoint(%arg0:ptr) !internal {
entry:	
[rdi]	%0x6 = copy ptr %arg0
[-8(%rbp)]	%0x11 = gen ptr
	move ptr %0x11 %0x6
[-12(%rbp)]	%0x13 = gen i32
[-24(%rbp)]	%0x14 = gen u64
[rdi]	%0x15 = copy ptr %0x11
	downstackframe [ptr @luaL_checklstring(ptr, i32, ptr) !default]
[rdi]	%0x8 = copy ptr %0x15
[rsi]	%0x9 = copy i32 1
[rdx]	%0x16 = lea ptr %0x14
[rdi]	%0x5 = call ptr @luaL_checklstring(%0x8:ptr, %0x9:i32, %0x16:ptr) bt label %L2
L2:	; pred=entry
	upstackframe [ptr @luaL_checklstring(ptr, i32, ptr) !default]
[-32(%rbp)]	%2x9 = gen ptr
	move ptr %2x9 %0x5
[rdi]	%2x11 = copy ptr %0x11
	downstackframe [i64 @luaL_optinteger(ptr, i32, i64) !default]
[rdi]	%2x6 = copy ptr %2x11
[rsi]	%2x7 = copy i32 2
[rdx]	%2x8 = copy i64 1
[rdi]	%2x3 = call i64 @luaL_optinteger(%2x6:ptr, %2x7:i32, %2x8:i64) bt label %L3
L3:	; pred=L2
	upstackframe [i64 @luaL_optinteger(ptr, i32, i64) !default]
[r15]	%3x6 = copy u64 %0x14
	downstackframe [i64 @u_posrelat(i64, u64) !internal]
[rdi]	%3x4 = copy i64 %2x3
[rsi]	%3x5 = copy u64 %3x6
[r15]	%3x1 = call i64 @u_posrelat(%3x4:i64, %3x5:u64) bt label %L4
L4:	; pred=L3
	upstackframe [i64 @u_posrelat(i64, u64) !internal]
[-40(%rbp)]	%4x10 = gen i64
	move i64 %4x10 %3x1
[r15]	%4x12 = copy ptr %0x11
[r14]	%4x13 = copy i64 %4x10
	downstackframe [i64 @luaL_optinteger(ptr, i32, i64) !default]
[rdi]	%4x7 = copy ptr %4x12
[rsi]	%4x8 = copy i32 3
[rdx]	%4x9 = copy i64 %4x13
[r14]	%4x4 = call i64 @luaL_optinteger(%4x7:ptr, %4x8:i32, %4x9:i64) bt label %L5
L5:	; pred=L4
	upstackframe [i64 @luaL_optinteger(ptr, i32, i64) !default]
[r15]	%5x6 = copy u64 %0x14
	downstackframe [i64 @u_posrelat(i64, u64) !internal]
[rdi]	%5x4 = copy i64 %4x4
[rsi]	%5x5 = copy u64 %5x6
[r15]	%5x1 = call i64 @u_posrelat(%5x4:i64, %5x5:u64) bt label %L6
L6:	; pred=L5
	upstackframe [i64 @u_posrelat(i64, u64) !internal]
[-48(%rbp)]	%6x8 = gen i64
	move i64 %6x8 %5x1
[r15]	%6x10 = copy ptr %0x11
	downstackframe [i32 @lua_toboolean(ptr, i32) !default]
[rdi]	%6x6 = copy ptr %6x10
[rsi]	%6x7 = copy i32 4
[r15]	%6x3 = call i32 @lua_toboolean(%6x6:ptr, %6x7:i32) bt label %L7
L7:	; pred=L6
	upstackframe [i32 @lua_toboolean(ptr, i32) !default]
[-52(%rbp)]	%7x8 = gen i32
	move i32 %7x8 %6x3
[-56(%rbp)]	%7x10 = gen i32
[-64(%rbp)]	%7x11 = gen ptr
[r15]	%7x12 = copy i64 %4x10
	%7x5 = icmp ge i64 %7x12, 1
	br u1 %7x5 label %L28, label %L8 
L28:	; pred=L7
[r15]	%28x0 = copy i8 1
	br label %L9
L9:	; pred=L10, L28
[r15]	%9x0 = phi i8 [%28x0: L28, %10x2: L10]
[r14]	%9x1 = copy i8 %9x0
[r14]	%9x7 = copy i64 %6x8
[rdi]	%9x8 = copy u64 %0x14
[rdi]	%9x4 = bitcast u64 %9x8 to i64
	%9x5 = icmp le i64 %9x7, %9x4
	br u1 %9x5 label %L29, label %L11 
L29:	; pred=L9
[r14]	%29x0 = copy i8 1
	br label %L12
L12:	; pred=L13, L29
[r14]	%12x0 = phi i8 [%29x0: L29, %13x2: L13]
[rdi]	%12x1 = copy i8 %12x0
[rdi]	%12x6 = copy i64 %4x10
[r13]	%12x7 = copy i64 %6x8
	%12x4 = icmp gt i64 %12x6, %12x7
	br u1 %12x4 label %L14, label %L15 
L14:	; pred=L12
	move i32 %0x13 0
	br label %L1
L15:	; pred=L12
[r13]	%15x5 = copy i64 %6x8
[rdi]	%15x6 = copy i64 %4x10
[rdi]	%15x2 = sub i64 %15x5, %15x6
	%15x3 = icmp ge i64 %15x2, 2147483647
	br u1 %15x3 label %L16, label %L17 
L16:	; pred=L15
[rdi]	%16x5 = copy ptr %0x11
	downstackframe [i32 @luaL_error(ptr, ptr) !vararg !default]
[rdi]	%16x3 = copy ptr %16x5
[rsi]	%16x6 = lea ptr @.str5
[rdi]	%16x1 = call i32 @luaL_error(%16x3:ptr, %16x6:ptr) bt label %L18
L18:	; pred=L16
	upstackframe [i32 @luaL_error(ptr, ptr) !vararg !default]
	move i32 %0x13 %16x1
	br label %L1
L17:	; pred=L15
[rdi]	%17x13 = copy i64 %6x8
[r13]	%17x14 = copy i64 %4x10
[r13]	%17x2 = sub i64 %17x13, %17x14
[r13]	%17x3 = trunc i64 %17x2 to i32
[r13]	%17x4 = add i32 %17x3, 1
	move i32 %7x10 %17x4
[r13]	%17x16 = copy ptr %0x11
[r12]	%17x17 = copy i32 %7x10
	downstackframe [void @luaL_checkstack(ptr, i32, ptr) !default]
[rdi]	%17x10 = copy ptr %17x16
[rsi]	%17x11 = copy i32 %17x17
[rdx]	%17x18 = lea ptr @.str6
	call void @luaL_checkstack(%17x10:ptr, %17x11:i32, %17x18:ptr) bt label %L19
L19:	; pred=L17
	upstackframe [void @luaL_checkstack(ptr, i32, ptr) !default]
	move i32 %7x10 0
[r12]	%19x19 = copy ptr %2x9
[r12]	%19x2 = ptr2int ptr %19x19 to i64
[r13]	%19x20 = copy i64 %6x8
[r13]	%19x4 = mul i64 %19x20, 1
[r13]	%19x5 = add i64 %19x2, %19x4
[r13]	%19x6 = int2ptr i64 %19x5 to ptr
	move ptr %7x11 %19x6
[r13]	%19x22 = copy i64 %4x10
[r13]	%19x9 = sub i64 %19x22, 1
[r12]	%19x23 = copy ptr %2x9
[r12]	%19x11 = ptr2int ptr %19x23 to i64
[r13]	%19x12 = mul i64 %19x9, 1
[r13]	%19x13 = add i64 %19x11, %19x12
[r13]	%19x14 = int2ptr i64 %19x13 to ptr
	move ptr %2x9 %19x14
	br label %L21
L21:	; pred=L19, L27
[r13]	%21x4 = copy ptr %2x9
[r12]	%21x5 = copy ptr %7x11
	%21x2 = icmp lt ptr %21x4, %21x5
	br u1 %21x2 label %L20, label %L22 
L20:	; pred=L21
[-68(%rbp)]	%20x10 = gen u32
[r12]	%20x11 = copy ptr %2x9
[r13]	%20x12 = copy i32 %7x8
	%20x3 = icmp eq i32 %20x12, 0
[r13]	%20x4 = flag2int u1 %20x3 to i32
	downstackframe [ptr @utf8_decode(ptr, ptr, i32) !internal]
[rdi]	%20x7 = copy ptr %20x11
[rsi]	%20x13 = lea ptr %20x10
[rdx]	%20x9 = copy i32 %20x4
[r13]	%20x5 = call ptr @utf8_decode(%20x7:ptr, %20x13:ptr, %20x9:i32) bt label %L23
L23:	; pred=L20
	upstackframe [ptr @utf8_decode(ptr, ptr, i32) !internal]
	move ptr %2x9 %20x5
[r13]	%23x7 = copy ptr %2x9
[r12]	%23x2 = int2ptr i8 0 to ptr
	%23x3 = icmp eq ptr %23x7, %23x2
	br u1 %23x3 label %L24, label %L25 
L24:	; pred=L23
[r12]	%24x5 = copy ptr %0x11
	downstackframe [i32 @luaL_error(ptr, ptr) !vararg !default]
[rdi]	%24x3 = copy ptr %24x5
[rsi]	%24x6 = lea ptr @.str7
[r12]	%24x1 = call i32 @luaL_error(%24x3:ptr, %24x6:ptr) bt label %L26
L26:	; pred=L24
	upstackframe [i32 @luaL_error(ptr, ptr) !vararg !default]
	move i32 %0x13 %24x1
	br label %L1
L25:	; pred=L23
[r12]	%25x8 = copy ptr %0x11
[r13]	%25x9 = copy u32 %20x10
[r13]	%25x2 = zext u32 %25x9 to u64
[r13]	%25x3 = bitcast u64 %25x2 to i64
	downstackframe [void @lua_pushinteger(ptr, i64) !default]
[rdi]	%25x6 = copy ptr %25x8
[rsi]	%25x7 = copy i64 %25x3
	call void @lua_pushinteger(%25x6:ptr, %25x7:i64) bt label %L27
L27:	; pred=L25
	upstackframe [void @lua_pushinteger(ptr, i64) !default]
[r13]	%27x5 = copy i32 %7x10
[r13]	%27x1 = add i32 %27x5, 1
	move i32 %7x10 %27x1
	br label %L21
L22:	; pred=L21
[r13]	%22x3 = copy i32 %7x10
	move i32 %0x13 %22x3
	br label %L1
L11:	; pred=L9
[r13]	%11x6 = copy ptr %0x11
	downstackframe [i32 @luaL_argerror(ptr, i32, ptr) !default]
[rdi]	%11x3 = copy ptr %11x6
[rsi]	%11x4 = copy i32 3
[rdx]	%11x7 = lea ptr @.str4
[r13]	%11x1 = call i32 @luaL_argerror(%11x3:ptr, %11x4:i32, %11x7:ptr) bt label %L13
L13:	; pred=L11
	upstackframe [i32 @luaL_argerror(ptr, i32, ptr) !default]
	%13x0 = icmp ne i32 %11x1, 0
[r13]	%13x1 = flag2int u1 %13x0 to i8
[r14]	%13x2 = copy i8 %13x1
	br label %L12
L8:	; pred=L7
[r13]	%8x6 = copy ptr %0x11
	downstackframe [i32 @luaL_argerror(ptr, i32, ptr) !default]
[rdi]	%8x3 = copy ptr %8x6
[rsi]	%8x4 = copy i32 2
[rdx]	%8x7 = lea ptr @.str3
[r13]	%8x1 = call i32 @luaL_argerror(%8x3:ptr, %8x4:i32, %8x7:ptr) bt label %L10
L10:	; pred=L8
	upstackframe [i32 @luaL_argerror(ptr, i32, ptr) !default]
	%10x0 = icmp ne i32 %8x1, 0
[r13]	%10x1 = flag2int u1 %10x0 to i8
[r15]	%10x2 = copy i8 %10x1
	br label %L9
L1:	; pred=L14, L18, L22, L26
[r13]	%1x2 = copy i32 %0x13
	ret i32 %1x2
}

define i32 @utflen(%arg0:ptr) !internal {
entry:	
[rdi]	%0x8 = copy ptr %arg0
[-8(%rbp)]	%0x13 = gen ptr
	move ptr %0x13 %0x8
[-12(%rbp)]	%0x15 = gen i32
[-24(%rbp)]	%0x16 = gen i64
	move i64 %0x16 0
[-32(%rbp)]	%0x18 = gen u64
[rdi]	%0x19 = copy ptr %0x13
	downstackframe [ptr @luaL_checklstring(ptr, i32, ptr) !default]
[rdi]	%0x10 = copy ptr %0x19
[rsi]	%0x11 = copy i32 1
[rdx]	%0x20 = lea ptr %0x18
[rdi]	%0x7 = call ptr @luaL_checklstring(%0x10:ptr, %0x11:i32, %0x20:ptr) bt label %L2
L2:	; pred=entry
	upstackframe [ptr @luaL_checklstring(ptr, i32, ptr) !default]
[-40(%rbp)]	%2x9 = gen ptr
	move ptr %2x9 %0x7
[rdi]	%2x11 = copy ptr %0x13
	downstackframe [i64 @luaL_optinteger(ptr, i32, i64) !default]
[rdi]	%2x6 = copy ptr %2x11
[rsi]	%2x7 = copy i32 2
[rdx]	%2x8 = copy i64 1
[rdi]	%2x3 = call i64 @luaL_optinteger(%2x6:ptr, %2x7:i32, %2x8:i64) bt label %L3
L3:	; pred=L2
	upstackframe [i64 @luaL_optinteger(ptr, i32, i64) !default]
[r15]	%3x6 = copy u64 %0x18
	downstackframe [i64 @u_posrelat(i64, u64) !internal]
[rdi]	%3x4 = copy i64 %2x3
[rsi]	%3x5 = copy u64 %3x6
[r15]	%3x1 = call i64 @u_posrelat(%3x4:i64, %3x5:u64) bt label %L4
L4:	; pred=L3
	upstackframe [i64 @u_posrelat(i64, u64) !internal]
[-48(%rbp)]	%4x11 = gen i64
	move i64 %4x11 %3x1
[r15]	%4x13 = copy ptr %0x13
[rdi]	%4x3 = neg i32 1
[r14]	%4x4 = sext i32 %4x3 to i64
	downstackframe [i64 @luaL_optinteger(ptr, i32, i64) !default]
[rdi]	%4x8 = copy ptr %4x13
[rsi]	%4x9 = copy i32 3
[rdx]	%4x10 = copy i64 %4x4
[r14]	%4x5 = call i64 @luaL_optinteger(%4x8:ptr, %4x9:i32, %4x10:i64) bt label %L5
L5:	; pred=L4
	upstackframe [i64 @luaL_optinteger(ptr, i32, i64) !default]
[r15]	%5x6 = copy u64 %0x18
	downstackframe [i64 @u_posrelat(i64, u64) !internal]
[rdi]	%5x4 = copy i64 %4x5
[rsi]	%5x5 = copy u64 %5x6
[r15]	%5x1 = call i64 @u_posrelat(%5x4:i64, %5x5:u64) bt label %L6
L6:	; pred=L5
	upstackframe [i64 @u_posrelat(i64, u64) !internal]
[-56(%rbp)]	%6x8 = gen i64
	move i64 %6x8 %5x1
[r15]	%6x10 = copy ptr %0x13
	downstackframe [i32 @lua_toboolean(ptr, i32) !default]
[rdi]	%6x6 = copy ptr %6x10
[rsi]	%6x7 = copy i32 4
[r15]	%6x3 = call i32 @lua_toboolean(%6x6:ptr, %6x7:i32) bt label %L7
L7:	; pred=L6
	upstackframe [i32 @lua_toboolean(ptr, i32) !default]
[-60(%rbp)]	%7x6 = gen i32
	move i32 %7x6 %6x3
[r15]	%7x8 = copy i64 %4x11
	%7x3 = icmp le i64 1, %7x8
	br u1 %7x3 label %L8, label %L25 
L8:	; pred=L7
[r15]	%8x9 = copy i64 %4x11
[r15]	%8x1 = sub i64 %8x9, 1
	move i64 %4x11 %8x1
[r14]	%8x11 = copy u64 %0x18
[r14]	%8x4 = bitcast u64 %8x11 to i64
	%8x5 = icmp le i64 %8x1, %8x4
[r14]	%8x6 = flag2int u1 %8x5 to i8
[r14]	%8x7 = copy i8 %8x6
	br label %L9
L9:	; pred=L8, L25
[r14]	%9x0 = phi i8 [%25x0: L25, %8x7: L8]
[r15]	%9x1 = copy i8 %9x0
	%9x2 = icmp ne i8 %9x1, 0
	br u1 %9x2 label %L26, label %L10 
L26:	; pred=L9
[r15]	%26x0 = copy i8 1
	br label %L11
L11:	; pred=L12, L26
[r15]	%11x0 = phi i8 [%26x0: L26, %12x2: L12]
[rdi]	%11x1 = copy i8 %11x0
[rdi]	%11x9 = copy i64 %6x8
[rdi]	%11x3 = sub i64 %11x9, 1
	move i64 %6x8 %11x3
[r13]	%11x11 = copy u64 %0x18
[r13]	%11x6 = bitcast u64 %11x11 to i64
	%11x7 = icmp lt i64 %11x3, %11x6
	br u1 %11x7 label %L27, label %L13 
L27:	; pred=L11
[r13]	%27x0 = copy i8 1
	br label %L14
L14:	; pred=L15, L27
[r13]	%14x0 = phi i8 [%27x0: L27, %15x2: L15]
[rdi]	%14x1 = copy i8 %14x0
	br label %L17
L17:	; pred=L14, L21
[rdi]	%17x4 = copy i64 %4x11
[r12]	%17x5 = copy i64 %6x8
	%17x2 = icmp le i64 %17x4, %17x5
	br u1 %17x2 label %L16, label %L18 
L16:	; pred=L17
[r12]	%16x15 = copy ptr %2x9
[r12]	%16x1 = ptr2int ptr %16x15 to i64
[rdi]	%16x16 = copy i64 %4x11
[rdi]	%16x3 = mul i64 %16x16, 1
[rdi]	%16x4 = add i64 %16x1, %16x3
[rdi]	%16x5 = int2ptr i64 %16x4 to ptr
[r12]	%16x6 = int2ptr i8 0 to ptr
[r11]	%16x17 = copy i32 %7x6
	%16x8 = icmp eq i32 %16x17, 0
[r11]	%16x9 = flag2int u1 %16x8 to i32
	downstackframe [ptr @utf8_decode(ptr, ptr, i32) !internal]
[rdi]	%16x12 = copy ptr %16x5
[rsi]	%16x13 = copy ptr %16x6
[rdx]	%16x14 = copy i32 %16x9
[r11]	%16x10 = call ptr @utf8_decode(%16x12:ptr, %16x13:ptr, %16x14:i32) bt label %L19
L19:	; pred=L16
	upstackframe [ptr @utf8_decode(ptr, ptr, i32) !internal]
[-72(%rbp)]	%19x7 = gen ptr
	move ptr %19x7 %16x10
[r11]	%19x9 = copy ptr %19x7
[r12]	%19x3 = int2ptr i8 0 to ptr
	%19x4 = icmp eq ptr %19x9, %19x3
	br u1 %19x4 label %L20, label %L21 
L20:	; pred=L19
[r12]	%20x4 = copy ptr %0x13
	downstackframe [void @lua_pushnil(ptr) !default]
[rdi]	%20x3 = copy ptr %20x4
	call void @lua_pushnil(%20x3:ptr) bt label %L22
L22:	; pred=L20
	upstackframe [void @lua_pushnil(ptr) !default]
[r12]	%22x8 = copy ptr %0x13
[r11]	%22x9 = copy i64 %4x11
[r11]	%22x2 = add i64 %22x9, 1
	downstackframe [void @lua_pushinteger(ptr, i64) !default]
[rdi]	%22x6 = copy ptr %22x8
[rsi]	%22x7 = copy i64 %22x2
	call void @lua_pushinteger(%22x6:ptr, %22x7:i64) bt label %L23
L23:	; pred=L22
	upstackframe [void @lua_pushinteger(ptr, i64) !default]
	move i32 %0x15 2
	br label %L1
L21:	; pred=L19
[r11]	%21x13 = copy ptr %19x7
[r11]	%21x1 = ptr2int ptr %21x13 to i64
[r12]	%21x14 = copy ptr %2x9
[r12]	%21x3 = ptr2int ptr %21x14 to i64
[r12]	%21x4 = sub i64 %21x1, %21x3
[r12]	%21x5 = int2ptr i64 %21x4 to ptr
[r12]	%21x6 = ptr2int ptr %21x5 to u64
[r12]	%21x7 = bitcast u64 %21x6 to i64
	move i64 %4x11 %21x7
[r12]	%21x16 = copy i64 %0x16
[r12]	%21x10 = add i64 %21x16, 1
	move i64 %0x16 %21x10
	br label %L17
L18:	; pred=L17
[r12]	%18x6 = copy ptr %0x13
[r11]	%18x7 = copy i64 %0x16
	downstackframe [void @lua_pushinteger(ptr, i64) !default]
[rdi]	%18x4 = copy ptr %18x6
[rsi]	%18x5 = copy i64 %18x7
	call void @lua_pushinteger(%18x4:ptr, %18x5:i64) bt label %L24
L24:	; pred=L18
	upstackframe [void @lua_pushinteger(ptr, i64) !default]
	move i32 %0x15 1
	br label %L1
L13:	; pred=L11
[r11]	%13x6 = copy ptr %0x13
	downstackframe [i32 @luaL_argerror(ptr, i32, ptr) !default]
[rdi]	%13x3 = copy ptr %13x6
[rsi]	%13x4 = copy i32 3
[rdx]	%13x7 = lea ptr @.str2
[r11]	%13x1 = call i32 @luaL_argerror(%13x3:ptr, %13x4:i32, %13x7:ptr) bt label %L15
L15:	; pred=L13
	upstackframe [i32 @luaL_argerror(ptr, i32, ptr) !default]
	%15x0 = icmp ne i32 %13x1, 0
[r11]	%15x1 = flag2int u1 %15x0 to i8
[r13]	%15x2 = copy i8 %15x1
	br label %L14
L10:	; pred=L9
[r11]	%10x6 = copy ptr %0x13
	downstackframe [i32 @luaL_argerror(ptr, i32, ptr) !default]
[rdi]	%10x3 = copy ptr %10x6
[rsi]	%10x4 = copy i32 2
[rdx]	%10x7 = lea ptr @.str1
[r11]	%10x1 = call i32 @luaL_argerror(%10x3:ptr, %10x4:i32, %10x7:ptr) bt label %L12
L12:	; pred=L10
	upstackframe [i32 @luaL_argerror(ptr, i32, ptr) !default]
	%12x0 = icmp ne i32 %10x1, 0
[r11]	%12x1 = flag2int u1 %12x0 to i8
[r15]	%12x2 = copy i8 %12x1
	br label %L11
L25:	; pred=L7
[r14]	%25x0 = copy i8 0
	br label %L9
L1:	; pred=L23, L24
[r11]	%1x2 = copy i32 %0x15
	ret i32 %1x2
}

define i32 @iter_aux(%arg0:ptr, %arg1:i32) !internal {
entry:	
[rsi]	%0x9 = copy i32 %arg1
[rdi]	%0x8 = copy ptr %arg0
[-8(%rbp)]	%0x14 = gen ptr
	move ptr %0x14 %0x8
[-12(%rbp)]	%0x16 = gen i32
	move i32 %0x16 %0x9
[-16(%rbp)]	%0x18 = gen i32
[-24(%rbp)]	%0x19 = gen u64
[rsi]	%0x20 = copy ptr %0x14
	downstackframe [ptr @luaL_checklstring(ptr, i32, ptr) !default]
[rdi]	%0x11 = copy ptr %0x20
[rsi]	%0x12 = copy i32 1
[rdx]	%0x21 = lea ptr %0x19
[rsi]	%0x7 = call ptr @luaL_checklstring(%0x11:ptr, %0x12:i32, %0x21:ptr) bt label %L2
L2:	; pred=entry
	upstackframe [ptr @luaL_checklstring(ptr, i32, ptr) !default]
[-32(%rbp)]	%2x10 = gen ptr
	move ptr %2x10 %0x7
[rsi]	%2x12 = copy ptr %0x14
[r15]	%2x3 = int2ptr i8 0 to ptr
	downstackframe [i64 @lua_tointegerx(ptr, i32, ptr) !default]
[rdi]	%2x7 = copy ptr %2x12
[rsi]	%2x8 = copy i32 2
[rdx]	%2x9 = copy ptr %2x3
[r15]	%2x4 = call i64 @lua_tointegerx(%2x7:ptr, %2x8:i32, %2x9:ptr) bt label %L3
L3:	; pred=L2
	upstackframe [i64 @lua_tointegerx(ptr, i32, ptr) !default]
[r15]	%3x0 = bitcast i64 %2x4 to u64
[-40(%rbp)]	%3x8 = gen u64
	move u64 %3x8 %3x0
[r15]	%3x10 = copy u64 %3x8
[rsi]	%3x11 = copy u64 %0x19
	%3x5 = icmp lt u64 %3x10, %3x11
	br u1 %3x5 label %L4, label %L19 
L4:	; pred=L3
	br label %L7
L7:	; pred=L4, L6
[rsi]	%7x12 = copy ptr %2x10
[rsi]	%7x1 = ptr2int ptr %7x12 to i64
[r15]	%7x13 = copy u64 %3x8
[r15]	%7x3 = bitcast u64 %7x13 to i64
[r15]	%7x4 = mul i64 %7x3, 1
[r15]	%7x5 = add i64 %7x1, %7x4
[r15]	%7x6 = int2ptr i64 %7x5 to ptr
[r15]	%7x7 = load i8 %7x6
[r15]	%7x8 = sext i8 %7x7 to i32
[r15]	%7x9 = and i32 %7x8, 192
	%7x10 = icmp eq i32 %7x9, 128
	br u1 %7x10 label %L6, label %L8 
L6:	; pred=L7
[r15]	%6x4 = copy u64 %3x8
[r15]	%6x1 = add u64 %6x4, 1
	move u64 %3x8 %6x1
	br label %L7
L8:	; pred=L7
	br label %L5
L5:	; pred=L8, L19
[r15]	%5x4 = copy u64 %3x8
[rsi]	%5x5 = copy u64 %0x19
	%5x2 = icmp ge u64 %5x4, %5x5
	br u1 %5x2 label %L9, label %L10 
L9:	; pred=L5
	move i32 %0x18 0
	br label %L1
L10:	; pred=L5
[-44(%rbp)]	%10x14 = gen u32
[rsi]	%10x15 = copy ptr %2x10
[rsi]	%10x2 = ptr2int ptr %10x15 to i64
[r15]	%10x16 = copy u64 %3x8
[r15]	%10x4 = bitcast u64 %10x16 to i64
[r15]	%10x5 = mul i64 %10x4, 1
[r15]	%10x6 = add i64 %10x2, %10x5
[r15]	%10x7 = int2ptr i64 %10x6 to ptr
[r14]	%10x17 = copy i32 %0x16
	downstackframe [ptr @utf8_decode(ptr, ptr, i32) !internal]
[rdi]	%10x11 = copy ptr %10x7
[rsi]	%10x18 = lea ptr %10x14
[rdx]	%10x13 = copy i32 %10x17
[r14]	%10x9 = call ptr @utf8_decode(%10x11:ptr, %10x18:ptr, %10x13:i32) bt label %L11
L11:	; pred=L10
	upstackframe [ptr @utf8_decode(ptr, ptr, i32) !internal]
[-56(%rbp)]	%11x7 = gen ptr
	move ptr %11x7 %10x9
[r14]	%11x9 = copy ptr %11x7
[r15]	%11x3 = int2ptr i8 0 to ptr
	%11x4 = icmp eq ptr %11x9, %11x3
	br u1 %11x4 label %L20, label %L12 
L20:	; pred=L11
[r15]	%20x0 = copy i8 1
	br label %L13
L13:	; pred=L12, L20
[r15]	%13x0 = phi i8 [%20x0: L20, %12x6: L12]
[r14]	%13x1 = copy i8 %13x0
	%13x2 = icmp ne i8 %13x1, 0
	br u1 %13x2 label %L14, label %L15 
L14:	; pred=L13
[r14]	%14x5 = copy ptr %0x14
	downstackframe [i32 @luaL_error(ptr, ptr) !vararg !default]
[rdi]	%14x3 = copy ptr %14x5
[rsi]	%14x6 = lea ptr @.str12
[r14]	%14x1 = call i32 @luaL_error(%14x3:ptr, %14x6:ptr) bt label %L16
L16:	; pred=L14
	upstackframe [i32 @luaL_error(ptr, ptr) !vararg !default]
	move i32 %0x18 %14x1
	br label %L1
L15:	; pred=L13
[r14]	%15x8 = copy ptr %0x14
[rsi]	%15x9 = copy u64 %3x8
[rsi]	%15x2 = add u64 %15x9, 1
[rsi]	%15x3 = bitcast u64 %15x2 to i64
	downstackframe [void @lua_pushinteger(ptr, i64) !default]
[rdi]	%15x6 = copy ptr %15x8
[rsi]	%15x7 = copy i64 %15x3
	call void @lua_pushinteger(%15x6:ptr, %15x7:i64) bt label %L17
L17:	; pred=L15
	upstackframe [void @lua_pushinteger(ptr, i64) !default]
[rsi]	%17x9 = copy ptr %0x14
[r14]	%17x10 = copy u32 %10x14
[r14]	%17x2 = zext u32 %17x10 to u64
[r14]	%17x3 = bitcast u64 %17x2 to i64
	downstackframe [void @lua_pushinteger(ptr, i64) !default]
[rdi]	%17x7 = copy ptr %17x9
[rsi]	%17x8 = copy i64 %17x3
	call void @lua_pushinteger(%17x7:ptr, %17x8:i64) bt label %L18
L18:	; pred=L17
	upstackframe [void @lua_pushinteger(ptr, i64) !default]
	move i32 %0x18 2
	br label %L1
L12:	; pred=L11
[r14]	%12x8 = copy ptr %11x7
[r14]	%12x1 = load i8 %12x8
[r14]	%12x2 = sext i8 %12x1 to i32
[r14]	%12x3 = and i32 %12x2, 192
	%12x4 = icmp eq i32 %12x3, 128
[r14]	%12x5 = flag2int u1 %12x4 to i8
[r15]	%12x6 = copy i8 %12x5
	br label %L13
L19:	; pred=L3
	br label %L5
L1:	; pred=L9, L16, L18
[r14]	%1x2 = copy i32 %0x18
	ret i32 %1x2
}

define i32 @iter_auxstrict(%arg0:ptr) !internal {
entry:	
[rdi]	%0x5 = copy ptr %arg0
[-8(%rbp)]	%0x9 = gen ptr
	move ptr %0x9 %0x5
[-12(%rbp)]	%0x11 = gen i32
[rdi]	%0x12 = copy ptr %0x9
	downstackframe [i32 @iter_aux(ptr, i32) !internal]
[rdi]	%0x7 = copy ptr %0x12
[rsi]	%0x8 = copy i32 1
[rdi]	%0x4 = call i32 @iter_aux(%0x7:ptr, %0x8:i32) bt label %L2
L2:	; pred=entry
	upstackframe [i32 @iter_aux(ptr, i32) !internal]
	move i32 %0x11 %0x4
	br label %L1
L1:	; pred=L2
[rdi]	%1x2 = copy i32 %0x11
	ret i32 %1x2
}

define ptr @utf8_decode(%arg0:ptr, %arg1:ptr, %arg2:i32) !internal {
entry:	
[rdx]	%0x21 = copy i32 %arg2
[rsi]	%0x20 = copy ptr %arg1
[rdi]	%0x19 = copy ptr %arg0
[-8(%rbp)]	%0x22 = gen ptr
	move ptr %0x22 %0x19
[-16(%rbp)]	%0x24 = gen ptr
	move ptr %0x24 %0x20
[-20(%rbp)]	%0x26 = gen i32
	move i32 %0x26 %0x21
[-32(%rbp)]	%0x28 = gen ptr
[rdx]	%0x29 = copy ptr %0x22
[rdx]	%0x30 = indexedLoad i8 %0x29, i64 0
[rdx]	%0x10 = bitcast i8 %0x30 to u8
[rdx]	%0x11 = zext u8 %0x10 to u32
[-36(%rbp)]	%0x31 = gen u32
	move u32 %0x31 %0x11
[-40(%rbp)]	%0x33 = gen u32
	move u32 %0x33 0
[rdx]	%0x35 = copy u32 %0x31
	%0x17 = icmp lt u32 %0x35, 128
	br u1 %0x17 label %L2, label %L3 
L2:	; pred=entry
[rdx]	%2x3 = copy u32 %0x31
	move u32 %0x33 %2x3
	br label %L4
L4:	; pred=L2, L16
[rdx]	%4x3 = copy i32 %0x26
	%4x1 = icmp ne i32 %4x3, 0
	br u1 %4x1 label %L17, label %L30 
L17:	; pred=L4
[rdx]	%17x5 = copy u32 %0x33
[rdx]	%17x1 = zext u32 %17x5 to u64
[rdx]	%17x2 = bitcast u64 %17x1 to i64
	%17x3 = icmp gt i64 %17x2, 1114111
	br u1 %17x3 label %L27, label %L19 
L27:	; pred=L17
[rdx]	%27x0 = copy i8 1
	br label %L20
L20:	; pred=L22, L27
[rdx]	%20x0 = phi i8 [%27x0: L27, %22x4: L22]
[rsi]	%20x1 = copy i8 %20x0
	%20x2 = icmp ne i8 %20x1, 0
	br u1 %20x2 label %L23, label %L24 
L23:	; pred=L20
[rsi]	%23x0 = int2ptr i8 0 to ptr
	move ptr %0x28 %23x0
	br label %L1
L24:	; pred=L20
	br label %L18
L18:	; pred=L24, L30
[rsi]	%18x3 = copy ptr %0x24
	%18x1 = icmp ne ptr %18x3, null
	br u1 %18x1 label %L25, label %L28 
L25:	; pred=L18
[rsi]	%25x4 = copy u32 %0x33
[rdi]	%25x5 = copy ptr %0x24
	store ptr %25x5, u32 %25x4
	br label %L26
L26:	; pred=L25, L28
[rdi]	%26x7 = copy ptr %0x22
[rdi]	%26x1 = ptr2int ptr %26x7 to i64
[rsi]	%26x2 = mul i64 1, 1
[rsi]	%26x3 = add i64 %26x1, %26x2
[rsi]	%26x4 = int2ptr i64 %26x3 to ptr
	move ptr %0x28 %26x4
	br label %L1
L28:	; pred=L18
	br label %L26
L19:	; pred=L17
[rsi]	%19x5 = copy u32 %0x33
[rsi]	%19x1 = zext u32 %19x5 to u64
[rsi]	%19x2 = bitcast u64 %19x1 to i64
	%19x3 = icmp le i64 55296, %19x2
	br u1 %19x3 label %L21, label %L29 
L21:	; pred=L19
[rsi]	%21x7 = copy u32 %0x33
[rsi]	%21x1 = zext u32 %21x7 to u64
[rsi]	%21x2 = bitcast u64 %21x1 to i64
	%21x3 = icmp le i64 %21x2, 57343
[rsi]	%21x4 = flag2int u1 %21x3 to i8
[rsi]	%21x5 = copy i8 %21x4
	br label %L22
L22:	; pred=L21, L29
[rsi]	%22x0 = phi i8 [%29x0: L29, %21x5: L21]
[rdi]	%22x1 = copy i8 %22x0
	%22x2 = icmp ne i8 %22x1, 0
[rdi]	%22x3 = flag2int u1 %22x2 to i8
[rdx]	%22x4 = copy i8 %22x3
	br label %L20
L29:	; pred=L19
[rsi]	%29x0 = copy i8 0
	br label %L22
L30:	; pred=L4
	br label %L18
L3:	; pred=entry
[-44(%rbp)]	%3x3 = gen i32
	move i32 %3x3 0
	br label %L6
L6:	; pred=L3, L10
[rdi]	%6x4 = copy u32 %0x31
[rdi]	%6x1 = and u32 %6x4, 64
	%6x2 = icmp ne u32 %6x1, 0
	br u1 %6x2 label %L5, label %L7 
L5:	; pred=L6
[rdi]	%5x17 = copy i32 %3x3
[rdi]	%5x1 = add i32 %5x17, 1
	move i32 %3x3 %5x1
[rdi]	%5x3 = sext i32 %5x1 to i64
[rsi]	%5x19 = copy ptr %0x22
[rsi]	%5x20 = indexedLoad i8 %5x19, i64 %5x3
[rsi]	%5x7 = bitcast i8 %5x20 to u8
[rsi]	%5x8 = zext u8 %5x7 to u32
[-48(%rbp)]	%5x21 = gen u32
	move u32 %5x21 %5x8
[rsi]	%5x23 = copy u32 %5x21
[rsi]	%5x12 = and u32 %5x23, 192
	%5x13 = icmp eq u32 %5x12, 128
[rsi]	%5x14 = flag2int u1 %5x13 to i32
	%5x15 = icmp eq i32 %5x14, 0
	br u1 %5x15 label %L8, label %L9 
L8:	; pred=L5
[rsi]	%8x0 = int2ptr i8 0 to ptr
	move ptr %0x28 %8x0
	br label %L1
L9:	; pred=L5
[rsi]	%9x7 = copy u32 %0x33
[rsi]	%9x1 = shl u32 %9x7, 6
[rdi]	%9x8 = copy u32 %5x21
[rdi]	%9x3 = and u32 %9x8, 63
[rdi]	%9x4 = or u32 %9x1, %9x3
	move u32 %0x33 %9x4
	br label %L10
L10:	; pred=L9
[rdi]	%10x4 = copy u32 %0x31
[rdi]	%10x1 = shl u32 %10x4, 1
	move u32 %0x31 %10x1
	br label %L6
L7:	; pred=L6
[rdi]	%7x12 = copy u32 %0x31
[rdi]	%7x1 = and u32 %7x12, 127
[rsi]	%7x13 = copy i32 %3x3
[rsi]	%7x3 = mul i32 %7x13, 5
[rsi]	%7x4 = bitcast i32 %7x3 to u32
[rcx]	%7x14 = copy u32 %7x4
[rsi]	%7x5 = shl u32 %7x1, %7x14
[rdi]	%7x15 = copy u32 %0x33
[rdi]	%7x7 = or u32 %7x15, %7x5
	move u32 %0x33 %7x7
[rdi]	%7x17 = copy i32 %3x3
	%7x10 = icmp gt i32 %7x17, 5
	br u1 %7x10 label %L31, label %L11 
L31:	; pred=L7
[rdi]	%31x0 = copy i8 1
	br label %L12
L12:	; pred=L11, L31
[rdi]	%12x0 = phi i8 [%31x0: L31, %11x5: L11]
[rsi]	%12x1 = copy i8 %12x0
	%12x2 = icmp ne i8 %12x1, 0
	br u1 %12x2 label %L32, label %L13 
L32:	; pred=L12
[rsi]	%32x0 = copy i8 1
	br label %L14
L14:	; pred=L13, L32
[rsi]	%14x0 = phi i8 [%32x0: L32, %13x7: L13]
[rdx]	%14x1 = copy i8 %14x0
	%14x2 = icmp ne i8 %14x1, 0
	br u1 %14x2 label %L15, label %L16 
L15:	; pred=L14
[rdx]	%15x0 = int2ptr i8 0 to ptr
	move ptr %0x28 %15x0
	br label %L1
L16:	; pred=L14
[rdx]	%16x9 = copy i32 %3x3
[rdx]	%16x1 = sext i32 %16x9 to i64
[r15]	%16x10 = copy ptr %0x22
[r15]	%16x3 = ptr2int ptr %16x10 to i64
[rdx]	%16x4 = mul i64 %16x1, 1
[rdx]	%16x5 = add i64 %16x3, %16x4
[rdx]	%16x6 = int2ptr i64 %16x5 to ptr
	move ptr %0x22 %16x6
	br label %L4
L13:	; pred=L12
[rdx]	%13x9 = copy u32 %0x33
[r15]	%13x10 = copy i32 %3x3
[r15]	%13x2 = sext i32 %13x10 to i64
[r14]	%13x11 = lea ptr @.limits.static0
[r14]	%13x12 = indexedLoad u32 %13x11, i64 %13x2
	%13x5 = icmp lt u32 %13x9, %13x12
[r14]	%13x6 = flag2int u1 %13x5 to i8
[rsi]	%13x7 = copy i8 %13x6
	br label %L14
L11:	; pred=L7
[r14]	%11x7 = copy u32 %0x33
[r14]	%11x1 = zext u32 %11x7 to u64
[r14]	%11x2 = bitcast u64 %11x1 to i64
	%11x3 = icmp gt i64 %11x2, 2147483647
[r14]	%11x4 = flag2int u1 %11x3 to i8
[rdi]	%11x5 = copy i8 %11x4
	br label %L12
L1:	; pred=L8, L15, L23, L26
[r14]	%1x2 = copy ptr %0x28
	ret ptr %1x2
}

define i32 @luaopen_utf8(%arg0:ptr) !default {
entry:	
[rdi]	%0x12 = copy ptr %arg0
[-8(%rbp)]	%0x17 = gen ptr
	move ptr %0x17 %0x12
[-12(%rbp)]	%0x19 = gen i32
[rdi]	%0x20 = copy ptr %0x17
[r15]	%0x4 = mul i32 5, 100
[r15]	%0x5 = add i32 %0x4, 5
[xmm15]	%0x6 = int2fp i32 %0x5 to f64
[r15]	%0x7 = mul i32 8, 16
[r15]	%0x8 = add i32 %0x7, 8
[r15]	%0x9 = sext i32 %0x8 to i64
[r15]	%0x10 = bitcast i64 %0x9 to u64
	downstackframe [void @luaL_checkversion_(ptr, f64, u64) !default]
[rdi]	%0x14 = copy ptr %0x20
[xmm0]	%0x15 = copy f64 %0x6
[rsi]	%0x16 = copy u64 %0x10
	call void @luaL_checkversion_(%0x14:ptr, %0x15:f64, %0x16:u64) bt label %L2
L2:	; pred=entry
	upstackframe [void @luaL_checkversion_(ptr, f64, u64) !default]
[r15]	%2x11 = copy ptr %0x17
	%2x1 = div |i32, i32|, i32 112, i32 16
[rdi]	%2x2 = proj |i32, i32| %2x1, 0
[r14]	%2x13 = copy i32 %2x2
[rdx]	%2x3 = proj |i32, i32| %2x1, 1
[rdi]	%2x12 = copy i32 %2x3
[r14]	%2x4 = sub i32 %2x13, 1
	downstackframe [void @lua_createtable(ptr, i32, i32) !default]
[rdi]	%2x8 = copy ptr %2x11
[rsi]	%2x9 = copy i32 0
[rdx]	%2x10 = copy i32 %2x4
	call void @lua_createtable(%2x8:ptr, %2x9:i32, %2x10:i32) bt label %L3
L3:	; pred=L2
	upstackframe [void @lua_createtable(ptr, i32, i32) !default]
[r14]	%3x8 = copy ptr %0x17
[r15]	%3x9 = lea ptr @.funcs.static20
[r15]	%3x1 = gep $luaL_Reg, ptr %3x9, i64 0
	downstackframe [void @luaL_setfuncs(ptr, ptr, i32) !default]
[rdi]	%3x5 = copy ptr %3x8
[rsi]	%3x6 = copy ptr %3x1
[rdx]	%3x7 = copy i32 0
	call void @luaL_setfuncs(%3x5:ptr, %3x6:ptr, %3x7:i32) bt label %L4
L4:	; pred=L3
	upstackframe [void @luaL_setfuncs(ptr, ptr, i32) !default]
[r15]	%4x13 = copy ptr %0x17
	%4x1 = div |i32, i32|, i32 30, i32 1
[r14]	%4x2 = proj |i32, i32| %4x1, 0
[rdi]	%4x15 = copy i32 %4x2
[rdx]	%4x3 = proj |i32, i32| %4x1, 1
[r14]	%4x14 = copy i32 %4x3
[r14]	%4x4 = sub i32 %4x15, 1
[r14]	%4x5 = sext i32 %4x4 to i64
[r14]	%4x6 = bitcast i64 %4x5 to u64
	downstackframe [ptr @lua_pushlstring(ptr, ptr, u64) !default]
[rdi]	%4x10 = copy ptr %4x13
[rsi]	%4x16 = lea ptr @.str21
[rdx]	%4x12 = copy u64 %4x6
[r14]	%4x7 = call ptr @lua_pushlstring(%4x10:ptr, %4x16:ptr, %4x12:u64) bt label %L5
L5:	; pred=L4
	upstackframe [ptr @lua_pushlstring(ptr, ptr, u64) !default]
[r14]	%5x8 = copy ptr %0x17
[r15]	%5x1 = neg i32 2
	downstackframe [void @lua_setfield(ptr, i32, ptr) !default]
[rdi]	%5x5 = copy ptr %5x8
[rsi]	%5x6 = copy i32 %5x1
[rdx]	%5x9 = lea ptr @.str22
	call void @lua_setfield(%5x5:ptr, %5x6:i32, %5x9:ptr) bt label %L6
L6:	; pred=L5
	upstackframe [void @lua_setfield(ptr, i32, ptr) !default]
	move i32 %0x19 1
	br label %L1
L1:	; pred=L6
[r15]	%1x2 = copy i32 %0x19
	ret i32 %1x2
}

define i32 @utfchar(%arg0:ptr) !internal {
entry:	
[rdi]	%0x5 = copy ptr %arg0
[-8(%rbp)]	%0x8 = gen ptr
	move ptr %0x8 %0x5
[-12(%rbp)]	%0x10 = gen i32
[rdi]	%0x11 = copy ptr %0x8
	downstackframe [i32 @lua_gettop(ptr) !default]
[rdi]	%0x7 = copy ptr %0x11
[rdi]	%0x4 = call i32 @lua_gettop(%0x7:ptr) bt label %L2
L2:	; pred=entry
	upstackframe [i32 @lua_gettop(ptr) !default]
[-16(%rbp)]	%2x6 = gen i32
	move i32 %2x6 %0x4
[rdi]	%2x8 = copy i32 %2x6
	%2x3 = icmp eq i32 %2x8, 1
	br u1 %2x3 label %L3, label %L4 
L3:	; pred=L2
[rdi]	%3x5 = copy ptr %0x8
	downstackframe [void @pushutfchar(ptr, i32) !internal]
[rdi]	%3x3 = copy ptr %3x5
[rsi]	%3x4 = copy i32 1
	call void @pushutfchar(%3x3:ptr, %3x4:i32) bt label %L5
L5:	; pred=L3
	upstackframe [void @pushutfchar(ptr, i32) !internal]
	br label %L6
L6:	; pred=L5, L14
	move i32 %0x10 1
	br label %L1
L4:	; pred=L2
[-20(%rbp)]	%4x7 = gen i32
[-1080(%rbp)]	%4x8 = gen $luaL_Buffer
[rdi]	%4x9 = copy ptr %0x8
	downstackframe [void @luaL_buffinit(ptr, ptr) !default]
[rdi]	%4x5 = copy ptr %4x9
[rsi]	%4x10 = lea ptr %4x8
	call void @luaL_buffinit(%4x5:ptr, %4x10:ptr) bt label %L7
L7:	; pred=L4
	upstackframe [void @luaL_buffinit(ptr, ptr) !default]
	move i32 %4x7 1
	br label %L9
L9:	; pred=L7, L13
[rdi]	%9x4 = copy i32 %4x7
[r15]	%9x5 = copy i32 %2x6
	%9x2 = icmp le i32 %9x4, %9x5
	br u1 %9x2 label %L8, label %L10 
L8:	; pred=L9
[r15]	%8x6 = copy ptr %0x8
[r14]	%8x7 = copy i32 %4x7
	downstackframe [void @pushutfchar(ptr, i32) !internal]
[rdi]	%8x4 = copy ptr %8x6
[rsi]	%8x5 = copy i32 %8x7
	call void @pushutfchar(%8x4:ptr, %8x5:i32) bt label %L11
L11:	; pred=L8
	upstackframe [void @pushutfchar(ptr, i32) !internal]
	downstackframe [void @luaL_addvalue(ptr) !default]
[rdi]	%11x4 = lea ptr %4x8
	call void @luaL_addvalue(%11x4:ptr) bt label %L12
L12:	; pred=L11
	upstackframe [void @luaL_addvalue(ptr) !default]
	br label %L13
L13:	; pred=L12
[r14]	%13x4 = copy i32 %4x7
[r14]	%13x1 = add i32 %13x4, 1
	move i32 %4x7 %13x1
	br label %L9
L10:	; pred=L9
	downstackframe [void @luaL_pushresult(ptr) !default]
[rdi]	%10x3 = lea ptr %4x8
	call void @luaL_pushresult(%10x3:ptr) bt label %L14
L14:	; pred=L10
	upstackframe [void @luaL_pushresult(ptr) !default]
	br label %L6
L1:	; pred=L6
[r14]	%1x2 = copy i32 %0x10
	ret i32 %1x2
}

define void @pushutfchar(%arg0:ptr, %arg1:i32) !internal {
entry:	
[rsi]	%0x8 = copy i32 %arg1
[rdi]	%0x7 = copy ptr %arg0
[-8(%rbp)]	%0x12 = gen ptr
	move ptr %0x12 %0x7
[-12(%rbp)]	%0x14 = gen i32
	move i32 %0x14 %0x8
[rsi]	%0x16 = copy ptr %0x12
[r15]	%0x17 = copy i32 %0x14
	downstackframe [i64 @luaL_checkinteger(ptr, i32) !default]
[rdi]	%0x10 = copy ptr %0x16
[rsi]	%0x11 = copy i32 %0x17
[r15]	%0x6 = call i64 @luaL_checkinteger(%0x10:ptr, %0x11:i32) bt label %L2
L2:	; pred=entry
	upstackframe [i64 @luaL_checkinteger(ptr, i32) !default]
[r15]	%2x0 = bitcast i64 %0x6 to u64
[-24(%rbp)]	%2x7 = gen u64
	move u64 %2x7 %2x0
[r15]	%2x9 = copy u64 %2x7
	%2x4 = icmp le u64 %2x9, 2147483647
	br u1 %2x4 label %L7, label %L3 
L7:	; pred=L2
[r15]	%7x0 = copy i8 1
	br label %L4
L4:	; pred=L5, L7
[r15]	%4x0 = phi i8 [%7x0: L7, %5x2: L5]
[rsi]	%4x1 = copy i8 %4x0
[rsi]	%4x10 = copy ptr %0x12
[rdi]	%4x11 = copy u64 %2x7
[r14]	%4x4 = bitcast u64 %4x11 to i64
	downstackframe [ptr @lua_pushfstring(ptr, ptr) !vararg !default]
[rdi]	%4x7 = copy ptr %4x10
[rsi]	%4x12 = lea ptr @.str9
[rdx]	%4x9 = copy i64 %4x4
[r14]	%4x5 = call ptr @lua_pushfstring(%4x7:ptr, %4x12:ptr, %4x9:i64) bt label %L6
L6:	; pred=L4
	upstackframe [ptr @lua_pushfstring(ptr, ptr) !vararg !default]
	br label %L1
L3:	; pred=L2
[r14]	%3x7 = copy ptr %0x12
[rsi]	%3x8 = copy i32 %0x14
	downstackframe [i32 @luaL_argerror(ptr, i32, ptr) !default]
[rdi]	%3x4 = copy ptr %3x7
[rsi]	%3x5 = copy i32 %3x8
[rdx]	%3x9 = lea ptr @.str8
[rsi]	%3x2 = call i32 @luaL_argerror(%3x4:ptr, %3x5:i32, %3x9:ptr) bt label %L5
L5:	; pred=L3
	upstackframe [i32 @luaL_argerror(ptr, i32, ptr) !default]
	%5x0 = icmp ne i32 %3x2, 0
[rsi]	%5x1 = flag2int u1 %5x0 to i8
[r15]	%5x2 = copy i8 %5x1
	br label %L4
L1:	; pred=L6
	ret void
}

define i32 @iter_codes(%arg0:ptr) !internal {
entry:	
[rdi]	%0x5 = copy ptr %arg0
[-8(%rbp)]	%0x9 = gen ptr
	move ptr %0x9 %0x5
[-12(%rbp)]	%0x11 = gen i32
[rdi]	%0x12 = copy ptr %0x9
	downstackframe [i32 @lua_toboolean(ptr, i32) !default]
[rdi]	%0x7 = copy ptr %0x12
[rsi]	%0x8 = copy i32 2
[rdi]	%0x4 = call i32 @lua_toboolean(%0x7:ptr, %0x8:i32) bt label %L2
L2:	; pred=entry
	upstackframe [i32 @lua_toboolean(ptr, i32) !default]
[-16(%rbp)]	%2x10 = gen i32
	move i32 %2x10 %0x4
[rdi]	%2x12 = copy ptr %0x9
[r15]	%2x3 = int2ptr i8 0 to ptr
	downstackframe [ptr @luaL_checklstring(ptr, i32, ptr) !default]
[rdi]	%2x7 = copy ptr %2x12
[rsi]	%2x8 = copy i32 1
[rdx]	%2x9 = copy ptr %2x3
[r15]	%2x4 = call ptr @luaL_checklstring(%2x7:ptr, %2x8:i32, %2x9:ptr) bt label %L3
L3:	; pred=L2
	upstackframe [ptr @luaL_checklstring(ptr, i32, ptr) !default]
[-24(%rbp)]	%3x11 = gen ptr
	move ptr %3x11 %2x4
[r15]	%3x13 = copy ptr %3x11
[r15]	%3x3 = load i8 %3x13
[r15]	%3x4 = sext i8 %3x3 to i32
[r15]	%3x5 = and i32 %3x4, 192
	%3x6 = icmp eq i32 %3x5, 128
[r15]	%3x7 = flag2int u1 %3x6 to i32
	%3x8 = icmp eq i32 %3x7, 0
	br u1 %3x8 label %L13, label %L4 
L13:	; pred=L3
[r15]	%13x0 = copy i8 1
	br label %L5
L5:	; pred=L6, L13
[r15]	%5x0 = phi i8 [%13x0: L13, %6x2: L6]
[rdi]	%5x1 = copy i8 %5x0
[r14]	%5x6 = copy ptr %0x9
[rdi]	%5x7 = copy i32 %2x10
	%5x4 = icmp ne i32 %5x7, 0
	br u1 %5x4 label %L7, label %L8 
L7:	; pred=L5
[r13]	%7x2 = lea ptr define i32 @iter_auxlax(ptr) !internal
	br label %L9
L9:	; pred=L7, L8
[r13]	%9x0 = phi ptr [%7x2: L7, %8x2: L8]
[r12]	%9x1 = copy ptr %9x0
	downstackframe [void @lua_pushcclosure(ptr, ptr, i32) !default]
[rdi]	%9x4 = copy ptr %5x6
[rsi]	%9x5 = copy ptr %9x1
[rdx]	%9x6 = copy i32 0
	call void @lua_pushcclosure(%9x4:ptr, %9x5:ptr, %9x6:i32) bt label %L10
L10:	; pred=L9
	upstackframe [void @lua_pushcclosure(ptr, ptr, i32) !default]
[r12]	%10x6 = copy ptr %0x9
	downstackframe [void @lua_pushvalue(ptr, i32) !default]
[rdi]	%10x4 = copy ptr %10x6
[rsi]	%10x5 = copy i32 1
	call void @lua_pushvalue(%10x4:ptr, %10x5:i32) bt label %L11
L11:	; pred=L10
	upstackframe [void @lua_pushvalue(ptr, i32) !default]
[r12]	%11x6 = copy ptr %0x9
	downstackframe [void @lua_pushinteger(ptr, i64) !default]
[rdi]	%11x4 = copy ptr %11x6
[rsi]	%11x5 = copy i64 0
	call void @lua_pushinteger(%11x4:ptr, %11x5:i64) bt label %L12
L12:	; pred=L11
	upstackframe [void @lua_pushinteger(ptr, i64) !default]
	move i32 %0x11 3
	br label %L1
L8:	; pred=L5
[r13]	%8x2 = lea ptr define i32 @iter_auxstrict(ptr) !internal
	br label %L9
L4:	; pred=L3
[r12]	%4x6 = copy ptr %0x9
	downstackframe [i32 @luaL_argerror(ptr, i32, ptr) !default]
[rdi]	%4x3 = copy ptr %4x6
[rsi]	%4x4 = copy i32 1
[rdx]	%4x7 = lea ptr @.str13
[r12]	%4x1 = call i32 @luaL_argerror(%4x3:ptr, %4x4:i32, %4x7:ptr) bt label %L6
L6:	; pred=L4
	upstackframe [i32 @luaL_argerror(ptr, i32, ptr) !default]
	%6x0 = icmp ne i32 %4x1, 0
[r12]	%6x1 = flag2int u1 %6x0 to i8
[r15]	%6x2 = copy i8 %6x1
	br label %L5
L1:	; pred=L12
[r12]	%1x2 = copy i32 %0x11
	ret i32 %1x2
}

define i32 @iter_auxlax(%arg0:ptr) !internal {
entry:	
[rdi]	%0x5 = copy ptr %arg0
[-8(%rbp)]	%0x9 = gen ptr
	move ptr %0x9 %0x5
[-12(%rbp)]	%0x11 = gen i32
[rdi]	%0x12 = copy ptr %0x9
	downstackframe [i32 @iter_aux(ptr, i32) !internal]
[rdi]	%0x7 = copy ptr %0x12
[rsi]	%0x8 = copy i32 0
[rdi]	%0x4 = call i32 @iter_aux(%0x7:ptr, %0x8:i32) bt label %L2
L2:	; pred=entry
	upstackframe [i32 @iter_aux(ptr, i32) !internal]
	move i32 %0x11 %0x4
	br label %L1
L1:	; pred=L2
[rdi]	%1x2 = copy i32 %0x11
	ret i32 %1x2
}
