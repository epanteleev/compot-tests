extern void @lua_pushnil(ptr) !default !default
extern i32 @luaL_getmetafield(ptr, i32, ptr) !default !default
extern i32 @ungetc(i32, ptr) !default !default
extern ptr @realpath(ptr, ptr) !default !default
extern i32 @lua_resume(ptr, ptr, i32, ptr) !default !default
extern i32 @mbtowc(ptr, ptr, u64) !default !default
extern ptr @strchr(ptr, i32) !default !default
extern i32 @lua_getglobal(ptr, ptr) !default !default
extern i64 @mrand48() !default !default
extern i32 @fseek(ptr, i64, i32) !default !default
extern i32 @lua_type(ptr, i32) !default !default
extern i32 @rand() !default !default
extern ptr @lua_setupvalue(ptr, i32, i32) !default !default
extern i32 @strncmp(ptr, ptr, u64) !default !default
extern ptr @lua_pushlstring(ptr, ptr, u64) !default !default
extern ptr @fcvt(f64, i32, ptr, ptr) !default !default
extern ptr @ctermid(ptr) !default !default
extern ptr @setstate(ptr) !default !default
extern void @luaL_pushresult(ptr) !default !default
extern i32 @__xpg_strerror_r(i32, ptr, u64) !default !default
extern i32 @putchar(i32) !default !default
extern i32 @luaL_checkoption(ptr, i32, ptr, ptr) !default !default
extern i32 @getchar() !default !default
extern u32 @luaL_makeseed(ptr) !default !default
extern void @quick_exit(i32) !default !default
extern ptr @tempnam(ptr, ptr) !default !default
extern i32 @__isoc99_vfscanf(ptr, ptr, ptr) !default !default
extern void @luaL_checkstack(ptr, i32, ptr) !default !default
extern f64 @lua_tonumberx(ptr, i32, ptr) !default !default
extern ptr @lua_gethook(ptr) !default !default
extern ptr @strtok_r(ptr, ptr, ptr) !default !default
extern ptr @lua_pushfstring(ptr, ptr) !vararg !default !vararg !default
extern i32 @__isoc99_sscanf(ptr, ptr) !vararg !default !vararg !default
extern i32 @luaL_loadfilex(ptr, ptr, ptr) !default !default
extern i32 @vsscanf(ptr, ptr, ptr) !default !default
extern i32 @fileno(ptr) !default !default
extern i32 @sscanf(ptr, ptr) !vararg !default !vararg !default
extern i32 @luaopen_package(ptr) !default !default
extern i32 @luaopen_utf8(ptr) !default !default
extern ptr @initstate(u32, ptr, u64) !default !default
extern void @luaL_checkversion_(ptr, f64, u64) !default !default
extern i64 @luaL_optinteger(ptr, i32, i64) !default !default
extern i32 @luaopen_os(ptr) !default !default
extern void @funlockfile(ptr) !default !default
extern i32 @mblen(ptr, u64) !default !default
extern i32 @lua_rawget(ptr, i32) !default !default
extern i32 @luaL_argerror(ptr, i32, ptr) !default !default
extern i32 @lua_gethookmask(ptr) !default !default
extern i32 @luaL_newmetatable(ptr, ptr) !default !default
extern i64 @nrand48(ptr) !default !default
extern void @free(ptr) !default !default
extern void @__assert_perror_fail(i32, ptr, u32, ptr) !default !default
extern ptr @getenv(ptr) !default !default
extern i32 @putchar_unlocked(i32) !default !default
extern ptr @luaL_buffinitsize(ptr, ptr, u64) !default !default
extern i32 @lua_isuserdata(ptr, i32) !default !default
extern ptr @mktemp(ptr) !default !default
extern void @lua_arith(ptr, i32) !default !default
extern i32 @vfscanf(ptr, ptr, ptr) !default !default
extern i32 @lua_gc(ptr, i32) !vararg !default !vararg !default
extern i32 @fprintf(ptr, ptr) !vararg !default !vararg !default
extern i32 @luaopen_debug(ptr) !default !default
extern i32 @lua_isstring(ptr, i32) !default !default
extern void @lua_rawseti(ptr, i32, i64) !default !default
extern i32 @fscanf(ptr, ptr) !vararg !default !vararg !default
extern i32 @__isoc99_fscanf(ptr, ptr) !vararg !default !vararg !default
extern void @luaL_setmetatable(ptr, ptr) !default !default
extern i32 @abs(i32) !default !default
extern i32 @__isoc99_vsscanf(ptr, ptr, ptr) !default !default
extern ptr @memcpy(ptr, ptr, u64) !default !default
extern void @lua_rawsetp(ptr, i32, ptr) !default !default
extern i32 @lua_isyieldable(ptr) !default !default
extern void @lua_concat(ptr, i32) !default !default
extern void @lua_copy(ptr, i32, i32) !default !default
extern ptr @lua_getupvalue(ptr, i32, i32) !default !default
extern f64 @luaL_checknumber(ptr, i32) !default !default
extern i64 @ftello64(ptr) !default !default
extern void @luaL_checkany(ptr, i32) !default !default
extern ptr @strpbrk(ptr, ptr) !default !default
extern ptr @tmpnam(ptr) !default !default
extern u64 @strxfrm(ptr, ptr, u64) !default !default
extern ptr @realloc(ptr, u64) !default !default
extern i32 @lua_isnumber(ptr, i32) !default !default
extern ptr @fgets(ptr, i32, ptr) !default !default
extern i32 @sprintf(ptr, ptr) !vararg !default !vararg !default
extern i64 @div(i32, i32) !default !default
extern i64 @atoll(ptr) !default !default
extern u64 @strlen(ptr) !default !default
extern i32 @memcmp(ptr, ptr, u64) !default !default
extern i64 @lua_tointegerx(ptr, i32, ptr) !default !default
extern i32 @lua_geti(ptr, i32, i64) !default !default
extern i32 @grantpt(i32) !default !default
extern void @lua_upvaluejoin(ptr, i32, i32, i32, i32) !default !default
extern ptr @bsearch(ptr, ptr, u64, u64, ptr) !default !default
extern |i64, i64| @ldiv(i64, i64) !default !default
extern void @flockfile(ptr) !default !default
extern i32 @lua_iscfunction(ptr, i32) !default !default
extern i32 @vsprintf(ptr, ptr, ptr) !default !default
extern void @luaL_traceback(ptr, ptr, ptr, i32) !default !default
extern i32 @luaL_getsubtable(ptr, i32, ptr) !default !default
extern i32 @at_quick_exit(ptr) !default !default
extern i32 @wctomb(ptr, i32) !default !default
extern ptr @gcvt(f64, i32, ptr) !default !default
extern i32 @lua_compare(ptr, i32, i32, i32) !default !default
extern ptr @strerror(i32) !default !default
extern i32 @ferror(ptr) !default !default
extern i64 @luaL_len(ptr, i32) !default !default
extern i64 @labs(i64) !default !default
extern void @abort() !default !default
extern ptr @strstr(ptr, ptr) !default !default
extern ptr @lua_newstate(ptr, ptr, u32) !default !default
extern ptr @luaL_prepbuffsize(ptr, u64) !default !default
extern i32 @putenv(ptr) !default !default
extern ptr @lua_tothread(ptr, i32) !default !default
extern i32 @lua_getstack(ptr, i32, ptr) !default !default
extern ptr @freopen64(ptr, ptr, ptr) !default !default
extern void @lua_closeslot(ptr, i32) !default !default
extern ptr @luaL_optlstring(ptr, i32, ptr, ptr) !default !default
extern i64 @ftell(ptr) !default !default
extern i32 @luaopen_table(ptr) !default !default
extern i32 @rand_r(ptr) !default !default
extern ptr @calloc(u64, u64) !default !default
extern i32 @lua_status(ptr) !default !default
extern ptr @lua_atpanic(ptr, ptr) !default !default
extern ptr @ptsname(i32) !default !default
extern void @lua_setglobal(ptr, ptr) !default !default
extern i32 @remove(ptr) !default !default
extern f64 @drand48() !default !default
extern i32 @printf(ptr) !vararg !default !vararg !default
extern ptr @strcat(ptr, ptr) !default !default
extern i64 @random() !default !default
extern i32 @lua_yieldk(ptr, i32, i64, ptr) !default !default
extern void @setbuf(ptr, ptr) !default !default
extern i32 @getchar_unlocked() !default !default
extern i64 @llabs(i64) !default !default
extern void @lua_setallocf(ptr, ptr, ptr) !default !default
extern ptr @lua_pushstring(ptr, ptr) !default !default
extern i32 @fgetpos64(ptr, ptr) !default !default
extern i32 @lua_getmetatable(ptr, i32) !default !default
extern ptr @luaL_testudata(ptr, i32, ptr) !default !default
extern void @srand48(i64) !default !default
extern void @clearerr(ptr) !default !default
extern i32 @lua_error(ptr) !default !default
extern ptr @popen(ptr, ptr) !default !default
extern f64 @erand48(ptr) !default !default
extern ptr @lua_tocfunction(ptr, i32) !default !default
extern i32 @fclose(ptr) !default !default
extern u64 @__ctype_get_mb_cur_max() !default !default
extern i32 @lua_gethookcount(ptr) !default !default
extern f64 @lua_version(ptr) !default !default
extern i32 @lua_dump(ptr, ptr, ptr, i32) !default !default
extern void @rewind(ptr) !default !default
extern void @luaL_buffinit(ptr, ptr) !default !default
extern i32 @ftrylockfile(ptr) !default !default
extern i32 @feof(ptr) !default !default
extern void @lua_toclose(ptr, i32) !default !default
extern i32 @vprintf(ptr, ptr) !default !default
extern ptr @strdup(ptr) !default !default
extern i32 @luaL_callmeta(ptr, i32, ptr) !default !default
extern i32 @fgetc(ptr) !default !default
extern ptr @lua_topointer(ptr, i32) !default !default
extern void @lua_seti(ptr, i32, i64) !default !default
extern i32 @putc(i32, ptr) !default !default
extern void @luaL_unref(ptr, i32, i32) !default !default
extern i32 @lua_isinteger(ptr, i32) !default !default
extern u32 @lua_numbertocstring(ptr, i32, ptr) !default !default
extern i32 @mkstemp64(ptr) !default !default
extern void @lua_len(ptr, i32) !default !default
extern void @lua_callk(ptr, i32, i32, i64, ptr) !default !default
extern i32 @posix_memalign(ptr, u64, u64) !default !default
extern ptr @lua_getlocal(ptr, ptr, i32) !default !default
extern i32 @scanf(ptr) !vararg !default !vararg !default
extern i32 @luaopen_io(ptr) !default !default
extern i32 @vscanf(ptr, ptr) !default !default
extern ptr @strcpy(ptr, ptr) !default !default
extern u64 @lua_rawlen(ptr, i32) !default !default
extern void @lua_pushinteger(ptr, i64) !default !default
extern ptr @fopen64(ptr, ptr) !default !default
extern void @luaL_addgsub(ptr, ptr, ptr, ptr) !default !default
extern i32 @lua_getfield(ptr, i32, ptr) !default !default
extern i32 @vfprintf(ptr, ptr, ptr) !default !default
extern ptr @luaL_checkudata(ptr, i32, ptr) !default !default
extern ptr @lua_pushvfstring(ptr, ptr, ptr) !default !default
extern void @luaL_addvalue(ptr) !default !default
extern i32 @unlockpt(i32) !default !default
extern i32 @lua_toboolean(ptr, i32) !default !default
extern u64 @fread(ptr, u64, u64, ptr) !default !default
extern void @luaL_addlstring(ptr, ptr, u64) !default !default
extern void @exit(i32) !default !default
extern ptr @memccpy(ptr, ptr, i32, u64) !default !default
extern i32 @luaL_ref(ptr, i32) !default !default
extern ptr @lua_upvalueid(ptr, i32, i32) !default !default
extern i32 @system(ptr) !default !default
extern i64 @jrand48(ptr) !default !default
extern |i64, i64| @lldiv(i64, i64) !default !default
extern u64 @strspn(ptr, ptr) !default !default
extern void @lua_pushboolean(ptr, i32) !default !default
extern void @__assert(ptr, ptr, i32) !default !default
extern void @lua_close(ptr) !default !default
extern i64 @strtoll(ptr, ptr, i32) !default !default
extern void @lua_settable(ptr, i32) !default !default
extern void @__assert_fail(ptr, ptr, u32, ptr) !default !default
extern i32 @lua_gettable(ptr, i32) !default !default
extern f64 @strtold(ptr, ptr) !default !default
extern ptr @lua_typename(ptr, i32) !default !default
extern i32 @lua_pcallk(ptr, i32, i32, i32, i64, ptr) !default !default
extern i64 @a64l(ptr) !default !default
extern void @lua_pushcclosure(ptr, ptr, i32) !default !default
extern ptr @l64a(i64) !default !default
extern void @_Exit(i32) !default !default
extern i32 @fputc(i32, ptr) !default !default
extern i32 @setenv(ptr, ptr, i32) !default !default
extern i32 @pclose(ptr) !default !default
extern i32 @lua_closethread(ptr, ptr) !default !default
extern ptr @seed48(ptr) !default !default
extern i32 @strcoll(ptr, ptr) !default !default
extern u64 @strtoull(ptr, ptr, i32) !default !default
extern void @lua_pushlightuserdata(ptr, ptr) !default !default
extern void @lua_setfield(ptr, i32, ptr) !default !default
extern i64 @strtol(ptr, ptr, i32) !default !default
extern f64 @luaL_optnumber(ptr, i32, f64) !default !default
extern void @luaL_addstring(ptr, ptr) !default !default
extern i32 @lua_absindex(ptr, i32) !default !default
extern i32 @luaopen_coroutine(ptr) !default !default
extern void @lua_rotate(ptr, i32, i32) !default !default
extern i32 @luaL_loadbufferx(ptr, ptr, u64, ptr, ptr) !default !default
extern ptr @aligned_alloc(u64, u64) !default !default
extern i32 @atoi(ptr) !default !default
extern ptr @malloc(u64) !default !default
extern f64 @atof(ptr) !default !default
extern i32 @__uflow(ptr) !default !default
extern i32 @puts(ptr) !default !default
extern ptr @lua_setlocal(ptr, ptr, i32) !default !default
extern i32 @rename(ptr, ptr) !default !default
extern ptr @strrchr(ptr, i32) !default !default
extern i32 @fputs(ptr, ptr) !default !default
extern ptr @memchr(ptr, i32, u64) !default !default
extern void @lua_rawset(ptr, i32) !default !default
extern i32 @lua_rawequal(ptr, i32, i32) !default !default
extern void @perror(ptr) !default !default
extern i64 @atol(ptr) !default !default
extern i32 @fflush(ptr) !default !default
extern ptr @strncat(ptr, ptr, u64) !default !default
extern i32 @lua_setmetatable(ptr, i32) !default !default
extern void @srandom(u32) !default !default
extern i64 @luaL_checkinteger(ptr, i32) !default !default
extern void @luaL_setfuncs(ptr, ptr, i32) !default !default
extern ptr @luaL_checklstring(ptr, i32, ptr) !default !default
extern void @srand(u32) !default !default
extern i32 @luaL_error(ptr, ptr) !vararg !default !vararg !default
extern i32 @luaopen_math(ptr) !default !default
extern void @luaL_openselectedlibs(ptr, i32, i32) !default !default
extern void @lua_pushnumber(ptr, f64) !default !default
extern ptr @lua_getallocf(ptr, ptr) !default !default
extern i32 @__memcmpeq(ptr, ptr, u64) !default !default
extern i32 @strcmp(ptr, ptr) !default !default
extern i32 @lua_getinfo(ptr, ptr, ptr) !default !default
extern ptr @luaL_gsub(ptr, ptr, ptr, ptr) !default !default
extern ptr @lua_newthread(ptr) !default !default
extern u64 @lua_stringtonumber(ptr, ptr) !default !default
extern ptr @strtok(ptr, ptr) !default !default
extern f64 @strtod(ptr, ptr) !default !default
extern ptr @__strtok_r(ptr, ptr, ptr) !default !default
extern void @lua_xmove(ptr, ptr, i32) !default !default
extern ptr @lua_touserdata(ptr, i32) !default !default
extern void @luaL_checktype(ptr, i32, i32) !default !default
extern f32 @strtof(ptr, ptr) !default !default
extern ptr @memset(ptr, i32, u64) !default !default
extern i32 @luaL_loadstring(ptr, ptr) !default !default
extern i32 @__isoc99_vscanf(ptr, ptr) !default !default
extern i32 @getc_unlocked(ptr) !default !default
extern void @lcong48(ptr) !default !default
extern ptr @memmove(ptr, ptr, u64) !default !default
extern ptr @tmpfile64() !default !default
extern i32 @posix_openpt(i32) !default !default
extern void @lua_createtable(ptr, i32, i32) !default !default
extern i32 @luaopen_string(ptr) !default !default
extern ptr @lua_newuserdatauv(ptr, u64, i32) !default !default
extern void @lua_setwarnf(ptr, ptr, ptr) !default !default
extern void @luaL_pushresultsize(ptr, u64) !default !default
extern i32 @setvbuf(ptr, ptr, i32, u64) !default !default
extern i32 @luaopen_base(ptr) !default !default
extern i32 @luaL_fileresult(ptr, i32, ptr) !default !default
extern i32 @getsubopt(ptr, ptr, ptr) !default !default
extern i32 @lua_getiuservalue(ptr, i32, i32) !default !default
extern i32 @fsetpos64(ptr, ptr) !default !default
extern i32 @atexit(ptr) !default !default
extern ptr @fdopen(i32, ptr) !default !default
extern u64 @strcspn(ptr, ptr) !default !default
extern void @luaL_requiref(ptr, ptr, ptr, i32) !default !default
extern i32 @luaL_execresult(ptr, i32) !default !default
extern i32 @lua_pushthread(ptr) !default !default
extern i32 @__isoc99_scanf(ptr) !vararg !default !vararg !default
extern i32 @luaL_typeerror(ptr, i32, ptr) !default !default
extern i32 @putc_unlocked(i32, ptr) !default !default
extern u64 @wcstombs(ptr, ptr, u64) !default !default
extern ptr @lua_pushexternalstring(ptr, ptr, u64, ptr, ptr) !default !default
extern i32 @__overflow(ptr, i32) !default !default
extern u64 @strtoul(ptr, ptr, i32) !default !default
extern u64 @mbstowcs(ptr, ptr, u64) !default !default
extern void @lua_warning(ptr, ptr, i32) !default !default
extern void @lua_pushvalue(ptr, i32) !default !default
extern i32 @vsnprintf(ptr, u64, ptr, ptr) !default !default
extern void @lua_settop(ptr, i32) !default !default
extern void @lua_sethook(ptr, ptr, i32, i32) !default !default
extern i32 @snprintf(ptr, u64, ptr) !vararg !default !vararg !default
extern ptr @lua_tolstring(ptr, i32, ptr) !default !default
extern void @qsort(ptr, u64, u64, ptr) !default !default
extern i64 @lrand48() !default !default
extern i32 @lua_load(ptr, ptr, ptr, ptr, ptr) !default !default
extern i32 @lua_rawgeti(ptr, i32, i64) !default !default
extern i32 @lua_rawgetp(ptr, i32, ptr) !default !default
extern i32 @lua_setiuservalue(ptr, i32, i32) !default !default
extern u64 @fwrite(ptr, u64, u64, ptr) !default !default
extern i32 @lua_gettop(ptr) !default !default
extern i32 @fseeko64(ptr, i64, i32) !default !default
extern i32 @lua_checkstack(ptr, i32) !default !default
extern ptr @ecvt(f64, i32, ptr, ptr) !default !default
extern ptr @luaL_tolstring(ptr, i32, ptr) !default !default
extern void @luaL_where(ptr, i32) !default !default
extern i32 @lua_next(ptr, i32) !default !default
extern ptr @strncpy(ptr, ptr, u64) !default !default
extern i32 @unsetenv(ptr) !default !default
extern i32 @getc(ptr) !default !default
extern ptr @luaL_newstate() !default !default

$luaL_Reg = type {ptr, ptr}
$union.35 = type {<i8 x 1024>}
$luaL_Buffer = type {ptr, u64, u64, ptr, $union.35}

@.str17 = constant <i8 x 3> "len"
@.str16 = constant <i8 x 4> "char"
@.str19 = constant <i8 x 11> "charpattern"
@.str18 = constant <i8 x 5> "codes"
@.str9 = constant <i8 x 2> "%U"
@.str7 = constant <i8 x 18> "invalid UTF-8 code"
@.str11 = constant <i8 x 39> "initial position is a continuation byte"
@.str22 = constant <i8 x 11> "charpattern"
@.str8 = constant <i8 x 18> "value out of range"
@.str10 = constant <i8 x 22> "position out of bounds"
@.str21 = constant <i8 x 29> "[\0-\\x7F\\xC2-\\xFD][\\x80-\\xBF]*"
@.str5 = constant <i8 x 21> "string slice too long"
@.str13 = constant <i8 x 18> "invalid UTF-8 code"
@.str6 = constant <i8 x 21> "string slice too long"
@.str12 = constant <i8 x 18> "invalid UTF-8 code"
@.str3 = constant <i8 x 13> "out of bounds"
@.str15 = constant <i8 x 9> "codepoint"
@.str4 = constant <i8 x 13> "out of bounds"
@.str14 = constant <i8 x 6> "offset"
@.str1 = constant <i8 x 30> "initial position out of bounds"
@.str2 = constant <i8 x 28> "final position out of bounds"

@stdin = extern global ptr
@stdout = extern global ptr
@stderr = extern global ptr
@.limits.static0 = global <u32 x 6> {-1, 128, 2048, 65536, 2097152, 67108864} !!internal
@.funcs.static20 = global <$luaL_Reg x 7> {{.str14, byteoffset}, {.str15, codepoint}, {.str16, utfchar}, {.str17, utflen}, {.str18, iter_codes}, {.str19, null}, {null, null}} !!internal

define i64 @u_posrelat(%arg0:i64, %arg1:u64) !internal {
entry:	
	%0x0 = alloc i64
	store ptr %0x0, i64 %arg0
	%0x2 = alloc u64
	store ptr %0x2, u64 %arg1
	%0x4 = alloc i64
	%0x5 = load i64 %0x0
	%0x6 = icmp ge i64 %0x5, 0
	br u1 %0x6 label %L2, label %L3 
L2:	; pred=entry
	%2x0 = load i64 %0x0
	store ptr %0x4, i64 %2x0
	br label %L1
L3:	; pred=entry
	%3x0 = load i64 %0x0
	%3x1 = bitcast i64 %3x0 to u64
	%3x2 = sub u64 0, %3x1
	%3x3 = load u64 %0x2
	%3x4 = icmp gt u64 %3x2, %3x3
	br u1 %3x4 label %L4, label %L5 
L4:	; pred=L3
	store ptr %0x4, i64 0
	br label %L1
L5:	; pred=L3
	%5x0 = load u64 %0x2
	%5x1 = bitcast u64 %5x0 to i64
	%5x2 = load i64 %0x0
	%5x3 = add i64 %5x1, %5x2
	%5x4 = add i64 %5x3, 1
	store ptr %0x4, i64 %5x4
	br label %L1
L1:	; pred=L2, L4, L5
	%1x0 = load i64 %0x4
	ret i64 %1x0
}

define ptr @utf8_decode(%arg0:ptr, %arg1:ptr, %arg2:i32) !internal {
entry:	
	%0x0 = alloc ptr
	store ptr %0x0, ptr %arg0
	%0x2 = alloc ptr
	store ptr %0x2, ptr %arg1
	%0x4 = alloc i32
	store ptr %0x4, i32 %arg2
	%0x6 = alloc ptr
	%0x7 = load ptr %0x0
	%0x8 = gep i8, ptr %0x7, i64 0
	%0x9 = load i8 %0x8
	%0x10 = bitcast i8 %0x9 to u8
	%0x11 = zext u8 %0x10 to u32
	%0x12 = alloc u32
	store ptr %0x12, u32 %0x11
	%0x14 = alloc u32
	store ptr %0x14, u32 0
	%0x16 = load u32 %0x12
	%0x17 = icmp lt u32 %0x16, 128
	br u1 %0x17 label %L2, label %L3 
L2:	; pred=entry
	%2x0 = load u32 %0x12
	store ptr %0x14, u32 %2x0
	br label %L4
L4:	; pred=L2, L16
	%4x0 = load i32 %0x4
	%4x1 = icmp ne i32 %4x0, 0
	br u1 %4x1 label %L17, label %L18 
L17:	; pred=L4
	%17x0 = load u32 %0x14
	%17x1 = zext u32 %17x0 to u64
	%17x2 = bitcast u64 %17x1 to i64
	%17x3 = icmp gt i64 %17x2, 1114111
	br u1 %17x3 label %L20, label %L19 
L20:	; pred=L17, L22
	%20x0 = phi i8 [1: L17, %22x2: L22]
	%20x1 = icmp ne i8 %20x0, 0
	br u1 %20x1 label %L23, label %L24 
L23:	; pred=L20
	%23x0 = int2ptr i8 0 to ptr
	store ptr %0x6, ptr %23x0
	br label %L1
L24:	; pred=L20
	br label %L18
L18:	; pred=L4, L24
	%18x0 = load ptr %0x2
	%18x1 = icmp ne ptr %18x0, null
	br u1 %18x1 label %L25, label %L26 
L25:	; pred=L18
	%25x0 = load u32 %0x14
	%25x1 = load ptr %0x2
	store ptr %25x1, u32 %25x0
	br label %L26
L26:	; pred=L18, L25
	%26x0 = load ptr %0x0
	%26x1 = ptr2int ptr %26x0 to i64
	%26x2 = mul i64 1, 1
	%26x3 = add i64 %26x1, %26x2
	%26x4 = int2ptr i64 %26x3 to ptr
	store ptr %0x6, ptr %26x4
	br label %L1
L19:	; pred=L17
	%19x0 = load u32 %0x14
	%19x1 = zext u32 %19x0 to u64
	%19x2 = bitcast u64 %19x1 to i64
	%19x3 = icmp le i64 55296, %19x2
	br u1 %19x3 label %L21, label %L22 
L21:	; pred=L19
	%21x0 = load u32 %0x14
	%21x1 = zext u32 %21x0 to u64
	%21x2 = bitcast u64 %21x1 to i64
	%21x3 = icmp le i64 %21x2, 57343
	%21x4 = flag2int u1 %21x3 to i8
	br label %L22
L22:	; pred=L19, L21
	%22x0 = phi i8 [0: L19, %21x4: L21]
	%22x1 = icmp ne i8 %22x0, 0
	%22x2 = flag2int u1 %22x1 to i8
	br label %L20
L3:	; pred=entry
	%3x0 = alloc i32
	store ptr %3x0, i32 0
	br label %L6
L6:	; pred=L3, L10
	%6x0 = load u32 %0x12
	%6x1 = and u32 %6x0, 64
	%6x2 = icmp ne u32 %6x1, 0
	br u1 %6x2 label %L5, label %L7 
L5:	; pred=L6
	%5x0 = load i32 %3x0
	%5x1 = add i32 %5x0, 1
	store ptr %3x0, i32 %5x1
	%5x3 = sext i32 %5x1 to i64
	%5x4 = load ptr %0x0
	%5x5 = gep i8, ptr %5x4, i64 %5x3
	%5x6 = load i8 %5x5
	%5x7 = bitcast i8 %5x6 to u8
	%5x8 = zext u8 %5x7 to u32
	%5x9 = alloc u32
	store ptr %5x9, u32 %5x8
	%5x11 = load u32 %5x9
	%5x12 = and u32 %5x11, 192
	%5x13 = icmp eq u32 %5x12, 128
	%5x14 = flag2int u1 %5x13 to i32
	%5x15 = icmp eq i32 %5x14, 0
	br u1 %5x15 label %L8, label %L9 
L8:	; pred=L5
	%8x0 = int2ptr i8 0 to ptr
	store ptr %0x6, ptr %8x0
	br label %L1
L9:	; pred=L5
	%9x0 = load u32 %0x14
	%9x1 = shl u32 %9x0, 6
	%9x2 = load u32 %5x9
	%9x3 = and u32 %9x2, 63
	%9x4 = or u32 %9x1, %9x3
	store ptr %0x14, u32 %9x4
	br label %L10
L10:	; pred=L9
	%10x0 = load u32 %0x12
	%10x1 = shl u32 %10x0, 1
	store ptr %0x12, u32 %10x1
	br label %L6
L7:	; pred=L6
	%7x0 = load u32 %0x12
	%7x1 = and u32 %7x0, 127
	%7x2 = load i32 %3x0
	%7x3 = mul i32 %7x2, 5
	%7x4 = bitcast i32 %7x3 to u32
	%7x5 = shl u32 %7x1, %7x4
	%7x6 = load u32 %0x14
	%7x7 = or u32 %7x6, %7x5
	store ptr %0x14, u32 %7x7
	%7x9 = load i32 %3x0
	%7x10 = icmp gt i32 %7x9, 5
	br u1 %7x10 label %L12, label %L11 
L12:	; pred=L7, L11
	%12x0 = phi i8 [1: L7, %11x4: L11]
	%12x1 = icmp ne i8 %12x0, 0
	br u1 %12x1 label %L14, label %L13 
L14:	; pred=L12, L13
	%14x0 = phi i8 [1: L12, %13x6: L13]
	%14x1 = icmp ne i8 %14x0, 0
	br u1 %14x1 label %L15, label %L16 
L15:	; pred=L14
	%15x0 = int2ptr i8 0 to ptr
	store ptr %0x6, ptr %15x0
	br label %L1
L16:	; pred=L14
	%16x0 = load i32 %3x0
	%16x1 = sext i32 %16x0 to i64
	%16x2 = load ptr %0x0
	%16x3 = ptr2int ptr %16x2 to i64
	%16x4 = mul i64 %16x1, 1
	%16x5 = add i64 %16x3, %16x4
	%16x6 = int2ptr i64 %16x5 to ptr
	store ptr %0x0, ptr %16x6
	br label %L4
L13:	; pred=L12
	%13x0 = load u32 %0x14
	%13x1 = load i32 %3x0
	%13x2 = sext i32 %13x1 to i64
	%13x3 = gep u32, ptr @.limits.static0, i64 %13x2
	%13x4 = load u32 %13x3
	%13x5 = icmp lt u32 %13x0, %13x4
	%13x6 = flag2int u1 %13x5 to i8
	br label %L14
L11:	; pred=L7
	%11x0 = load u32 %0x14
	%11x1 = zext u32 %11x0 to u64
	%11x2 = bitcast u64 %11x1 to i64
	%11x3 = icmp gt i64 %11x2, 2147483647
	%11x4 = flag2int u1 %11x3 to i8
	br label %L12
L1:	; pred=L8, L15, L23, L26
	%1x0 = load ptr %0x6
	ret ptr %1x0
}

define i32 @utflen(%arg0:ptr) !internal {
entry:	
	%0x0 = alloc ptr
	store ptr %0x0, ptr %arg0
	%0x2 = alloc i32
	%0x3 = alloc i64
	store ptr %0x3, i64 0
	%0x5 = alloc u64
	%0x6 = load ptr %0x0
	%0x7 = call ptr @luaL_checklstring(%0x6:ptr, 1:i32, %0x5:ptr) bt label %L2
L2:	; pred=entry
	%2x0 = alloc ptr
	store ptr %2x0, ptr %0x7
	%2x2 = load ptr %0x0
	%2x3 = call i64 @luaL_optinteger(%2x2:ptr, 2:i32, 1:i64) bt label %L3
L3:	; pred=L2
	%3x0 = load u64 %0x5
	%3x1 = call i64 @u_posrelat(%2x3:i64, %3x0:u64) bt label %L4
L4:	; pred=L3
	%4x0 = alloc i64
	store ptr %4x0, i64 %3x1
	%4x2 = load ptr %0x0
	%4x3 = neg i32 1
	%4x4 = sext i32 %4x3 to i64
	%4x5 = call i64 @luaL_optinteger(%4x2:ptr, 3:i32, %4x4:i64) bt label %L5
L5:	; pred=L4
	%5x0 = load u64 %0x5
	%5x1 = call i64 @u_posrelat(%4x5:i64, %5x0:u64) bt label %L6
L6:	; pred=L5
	%6x0 = alloc i64
	store ptr %6x0, i64 %5x1
	%6x2 = load ptr %0x0
	%6x3 = call i32 @lua_toboolean(%6x2:ptr, 4:i32) bt label %L7
L7:	; pred=L6
	%7x0 = alloc i32
	store ptr %7x0, i32 %6x3
	%7x2 = load i64 %4x0
	%7x3 = icmp le i64 1, %7x2
	br u1 %7x3 label %L8, label %L9 
L8:	; pred=L7
	%8x0 = load i64 %4x0
	%8x1 = sub i64 %8x0, 1
	store ptr %4x0, i64 %8x1
	%8x3 = load u64 %0x5
	%8x4 = bitcast u64 %8x3 to i64
	%8x5 = icmp le i64 %8x1, %8x4
	%8x6 = flag2int u1 %8x5 to i8
	br label %L9
L9:	; pred=L7, L8
	%9x0 = phi i8 [0: L7, %8x6: L8]
	%9x1 = icmp ne i8 %9x0, 0
	br u1 %9x1 label %L11, label %L10 
L11:	; pred=L9, L12
	%11x0 = phi i8 [1: L9, %12x1: L12]
	%11x1 = load i64 %6x0
	%11x2 = sub i64 %11x1, 1
	store ptr %6x0, i64 %11x2
	%11x4 = load u64 %0x5
	%11x5 = bitcast u64 %11x4 to i64
	%11x6 = icmp lt i64 %11x2, %11x5
	br u1 %11x6 label %L14, label %L13 
L14:	; pred=L11, L15
	%14x0 = phi i8 [1: L11, %15x1: L15]
	br label %L17
L17:	; pred=L14, L21
	%17x0 = load i64 %4x0
	%17x1 = load i64 %6x0
	%17x2 = icmp le i64 %17x0, %17x1
	br u1 %17x2 label %L16, label %L18 
L16:	; pred=L17
	%16x0 = load ptr %2x0
	%16x1 = ptr2int ptr %16x0 to i64
	%16x2 = load i64 %4x0
	%16x3 = mul i64 %16x2, 1
	%16x4 = add i64 %16x1, %16x3
	%16x5 = int2ptr i64 %16x4 to ptr
	%16x6 = int2ptr i8 0 to ptr
	%16x7 = load i32 %7x0
	%16x8 = icmp eq i32 %16x7, 0
	%16x9 = flag2int u1 %16x8 to i32
	%16x10 = call ptr @utf8_decode(%16x5:ptr, %16x6:ptr, %16x9:i32) bt label %L19
L19:	; pred=L16
	%19x0 = alloc ptr
	store ptr %19x0, ptr %16x10
	%19x2 = load ptr %19x0
	%19x3 = int2ptr i8 0 to ptr
	%19x4 = icmp eq ptr %19x2, %19x3
	br u1 %19x4 label %L20, label %L21 
L20:	; pred=L19
	%20x0 = load ptr %0x0
	call void @lua_pushnil(%20x0:ptr) bt label %L22
L22:	; pred=L20
	%22x0 = load ptr %0x0
	%22x1 = load i64 %4x0
	%22x2 = add i64 %22x1, 1
	call void @lua_pushinteger(%22x0:ptr, %22x2:i64) bt label %L23
L23:	; pred=L22
	store ptr %0x2, i32 2
	br label %L1
L21:	; pred=L19
	%21x0 = load ptr %19x0
	%21x1 = ptr2int ptr %21x0 to i64
	%21x2 = load ptr %2x0
	%21x3 = ptr2int ptr %21x2 to i64
	%21x4 = sub i64 %21x1, %21x3
	%21x5 = int2ptr i64 %21x4 to ptr
	%21x6 = ptr2int ptr %21x5 to u64
	%21x7 = bitcast u64 %21x6 to i64
	store ptr %4x0, i64 %21x7
	%21x9 = load i64 %0x3
	%21x10 = add i64 %21x9, 1
	store ptr %0x3, i64 %21x10
	br label %L17
L18:	; pred=L17
	%18x0 = load ptr %0x0
	%18x1 = load i64 %0x3
	call void @lua_pushinteger(%18x0:ptr, %18x1:i64) bt label %L24
L24:	; pred=L18
	store ptr %0x2, i32 1
	br label %L1
L13:	; pred=L11
	%13x0 = load ptr %0x0
	%13x1 = call i32 @luaL_argerror(%13x0:ptr, 3:i32, @.str2:ptr) bt label %L15
L15:	; pred=L13
	%15x0 = icmp ne i32 %13x1, 0
	%15x1 = flag2int u1 %15x0 to i8
	br label %L14
L10:	; pred=L9
	%10x0 = load ptr %0x0
	%10x1 = call i32 @luaL_argerror(%10x0:ptr, 2:i32, @.str1:ptr) bt label %L12
L12:	; pred=L10
	%12x0 = icmp ne i32 %10x1, 0
	%12x1 = flag2int u1 %12x0 to i8
	br label %L11
L1:	; pred=L23, L24
	%1x0 = load i32 %0x2
	ret i32 %1x0
}

define i32 @codepoint(%arg0:ptr) !internal {
entry:	
	%0x0 = alloc ptr
	store ptr %0x0, ptr %arg0
	%0x2 = alloc i32
	%0x3 = alloc u64
	%0x4 = load ptr %0x0
	%0x5 = call ptr @luaL_checklstring(%0x4:ptr, 1:i32, %0x3:ptr) bt label %L2
L2:	; pred=entry
	%2x0 = alloc ptr
	store ptr %2x0, ptr %0x5
	%2x2 = load ptr %0x0
	%2x3 = call i64 @luaL_optinteger(%2x2:ptr, 2:i32, 1:i64) bt label %L3
L3:	; pred=L2
	%3x0 = load u64 %0x3
	%3x1 = call i64 @u_posrelat(%2x3:i64, %3x0:u64) bt label %L4
L4:	; pred=L3
	%4x0 = alloc i64
	store ptr %4x0, i64 %3x1
	%4x2 = load ptr %0x0
	%4x3 = load i64 %4x0
	%4x4 = call i64 @luaL_optinteger(%4x2:ptr, 3:i32, %4x3:i64) bt label %L5
L5:	; pred=L4
	%5x0 = load u64 %0x3
	%5x1 = call i64 @u_posrelat(%4x4:i64, %5x0:u64) bt label %L6
L6:	; pred=L5
	%6x0 = alloc i64
	store ptr %6x0, i64 %5x1
	%6x2 = load ptr %0x0
	%6x3 = call i32 @lua_toboolean(%6x2:ptr, 4:i32) bt label %L7
L7:	; pred=L6
	%7x0 = alloc i32
	store ptr %7x0, i32 %6x3
	%7x2 = alloc i32
	%7x3 = alloc ptr
	%7x4 = load i64 %4x0
	%7x5 = icmp ge i64 %7x4, 1
	br u1 %7x5 label %L9, label %L8 
L9:	; pred=L7, L10
	%9x0 = phi i8 [1: L7, %10x1: L10]
	%9x1 = load i64 %6x0
	%9x2 = load u64 %0x3
	%9x3 = bitcast u64 %9x2 to i64
	%9x4 = icmp le i64 %9x1, %9x3
	br u1 %9x4 label %L12, label %L11 
L12:	; pred=L9, L13
	%12x0 = phi i8 [1: L9, %13x1: L13]
	%12x1 = load i64 %4x0
	%12x2 = load i64 %6x0
	%12x3 = icmp gt i64 %12x1, %12x2
	br u1 %12x3 label %L14, label %L15 
L14:	; pred=L12
	store ptr %0x2, i32 0
	br label %L1
L15:	; pred=L12
	%15x0 = load i64 %6x0
	%15x1 = load i64 %4x0
	%15x2 = sub i64 %15x0, %15x1
	%15x3 = icmp ge i64 %15x2, 2147483647
	br u1 %15x3 label %L16, label %L17 
L16:	; pred=L15
	%16x0 = load ptr %0x0
	%16x1 = call i32 @luaL_error(%16x0:ptr, @.str5:ptr) bt label %L18
L18:	; pred=L16
	store ptr %0x2, i32 %16x1
	br label %L1
L17:	; pred=L15
	%17x0 = load i64 %6x0
	%17x1 = load i64 %4x0
	%17x2 = sub i64 %17x0, %17x1
	%17x3 = trunc i64 %17x2 to i32
	%17x4 = add i32 %17x3, 1
	store ptr %7x2, i32 %17x4
	%17x6 = load ptr %0x0
	%17x7 = load i32 %7x2
	call void @luaL_checkstack(%17x6:ptr, %17x7:i32, @.str6:ptr) bt label %L19
L19:	; pred=L17
	store ptr %7x2, i32 0
	%19x1 = load ptr %2x0
	%19x2 = ptr2int ptr %19x1 to i64
	%19x3 = load i64 %6x0
	%19x4 = mul i64 %19x3, 1
	%19x5 = add i64 %19x2, %19x4
	%19x6 = int2ptr i64 %19x5 to ptr
	store ptr %7x3, ptr %19x6
	%19x8 = load i64 %4x0
	%19x9 = sub i64 %19x8, 1
	%19x10 = load ptr %2x0
	%19x11 = ptr2int ptr %19x10 to i64
	%19x12 = mul i64 %19x9, 1
	%19x13 = add i64 %19x11, %19x12
	%19x14 = int2ptr i64 %19x13 to ptr
	store ptr %2x0, ptr %19x14
	br label %L21
L21:	; pred=L19, L27
	%21x0 = load ptr %2x0
	%21x1 = load ptr %7x3
	%21x2 = icmp lt ptr %21x0, %21x1
	br u1 %21x2 label %L20, label %L22 
L20:	; pred=L21
	%20x0 = alloc u32
	%20x1 = load ptr %2x0
	%20x2 = load i32 %7x0
	%20x3 = icmp eq i32 %20x2, 0
	%20x4 = flag2int u1 %20x3 to i32
	%20x5 = call ptr @utf8_decode(%20x1:ptr, %20x0:ptr, %20x4:i32) bt label %L23
L23:	; pred=L20
	store ptr %2x0, ptr %20x5
	%23x1 = load ptr %2x0
	%23x2 = int2ptr i8 0 to ptr
	%23x3 = icmp eq ptr %23x1, %23x2
	br u1 %23x3 label %L24, label %L25 
L24:	; pred=L23
	%24x0 = load ptr %0x0
	%24x1 = call i32 @luaL_error(%24x0:ptr, @.str7:ptr) bt label %L26
L26:	; pred=L24
	store ptr %0x2, i32 %24x1
	br label %L1
L25:	; pred=L23
	%25x0 = load ptr %0x0
	%25x1 = load u32 %20x0
	%25x2 = zext u32 %25x1 to u64
	%25x3 = bitcast u64 %25x2 to i64
	call void @lua_pushinteger(%25x0:ptr, %25x3:i64) bt label %L27
L27:	; pred=L25
	%27x0 = load i32 %7x2
	%27x1 = add i32 %27x0, 1
	store ptr %7x2, i32 %27x1
	br label %L21
L22:	; pred=L21
	%22x0 = load i32 %7x2
	store ptr %0x2, i32 %22x0
	br label %L1
L11:	; pred=L9
	%11x0 = load ptr %0x0
	%11x1 = call i32 @luaL_argerror(%11x0:ptr, 3:i32, @.str4:ptr) bt label %L13
L13:	; pred=L11
	%13x0 = icmp ne i32 %11x1, 0
	%13x1 = flag2int u1 %13x0 to i8
	br label %L12
L8:	; pred=L7
	%8x0 = load ptr %0x0
	%8x1 = call i32 @luaL_argerror(%8x0:ptr, 2:i32, @.str3:ptr) bt label %L10
L10:	; pred=L8
	%10x0 = icmp ne i32 %8x1, 0
	%10x1 = flag2int u1 %10x0 to i8
	br label %L9
L1:	; pred=L14, L18, L22, L26
	%1x0 = load i32 %0x2
	ret i32 %1x0
}

define void @pushutfchar(%arg0:ptr, %arg1:i32) !internal {
entry:	
	%0x0 = alloc ptr
	store ptr %0x0, ptr %arg0
	%0x2 = alloc i32
	store ptr %0x2, i32 %arg1
	%0x4 = load ptr %0x0
	%0x5 = load i32 %0x2
	%0x6 = call i64 @luaL_checkinteger(%0x4:ptr, %0x5:i32) bt label %L2
L2:	; pred=entry
	%2x0 = bitcast i64 %0x6 to u64
	%2x1 = alloc u64
	store ptr %2x1, u64 %2x0
	%2x3 = load u64 %2x1
	%2x4 = icmp le u64 %2x3, 2147483647
	br u1 %2x4 label %L4, label %L3 
L4:	; pred=L2, L5
	%4x0 = phi i8 [1: L2, %5x1: L5]
	%4x1 = load ptr %0x0
	%4x2 = load u64 %2x1
	%4x3 = bitcast u64 %4x2 to i64
	%4x4 = call ptr @lua_pushfstring(%4x1:ptr, @.str9:ptr, %4x3:i64) bt label %L6
L6:	; pred=L4
	br label %L1
L3:	; pred=L2
	%3x0 = load ptr %0x0
	%3x1 = load i32 %0x2
	%3x2 = call i32 @luaL_argerror(%3x0:ptr, %3x1:i32, @.str8:ptr) bt label %L5
L5:	; pred=L3
	%5x0 = icmp ne i32 %3x2, 0
	%5x1 = flag2int u1 %5x0 to i8
	br label %L4
L1:	; pred=L6
	ret void
}

define i32 @utfchar(%arg0:ptr) !internal {
entry:	
	%0x0 = alloc ptr
	store ptr %0x0, ptr %arg0
	%0x2 = alloc i32
	%0x3 = load ptr %0x0
	%0x4 = call i32 @lua_gettop(%0x3:ptr) bt label %L2
L2:	; pred=entry
	%2x0 = alloc i32
	store ptr %2x0, i32 %0x4
	%2x2 = load i32 %2x0
	%2x3 = icmp eq i32 %2x2, 1
	br u1 %2x3 label %L3, label %L4 
L3:	; pred=L2
	%3x0 = load ptr %0x0
	call void @pushutfchar(%3x0:ptr, 1:i32) bt label %L5
L5:	; pred=L3
	br label %L6
L6:	; pred=L5, L14
	store ptr %0x2, i32 1
	br label %L1
L4:	; pred=L2
	%4x0 = alloc i32
	%4x1 = alloc $luaL_Buffer
	%4x2 = load ptr %0x0
	call void @luaL_buffinit(%4x2:ptr, %4x1:ptr) bt label %L7
L7:	; pred=L4
	store ptr %4x0, i32 1
	br label %L9
L9:	; pred=L7, L13
	%9x0 = load i32 %4x0
	%9x1 = load i32 %2x0
	%9x2 = icmp le i32 %9x0, %9x1
	br u1 %9x2 label %L8, label %L10 
L8:	; pred=L9
	%8x0 = load ptr %0x0
	%8x1 = load i32 %4x0
	call void @pushutfchar(%8x0:ptr, %8x1:i32) bt label %L11
L11:	; pred=L8
	call void @luaL_addvalue(%4x1:ptr) bt label %L12
L12:	; pred=L11
	br label %L13
L13:	; pred=L12
	%13x0 = load i32 %4x0
	%13x1 = add i32 %13x0, 1
	store ptr %4x0, i32 %13x1
	br label %L9
L10:	; pred=L9
	call void @luaL_pushresult(%4x1:ptr) bt label %L14
L14:	; pred=L10
	br label %L6
L1:	; pred=L6
	%1x0 = load i32 %0x2
	ret i32 %1x0
}

define i32 @byteoffset(%arg0:ptr) !internal {
entry:	
	%0x0 = alloc ptr
	store ptr %0x0, ptr %arg0
	%0x2 = alloc i32
	%0x3 = alloc u64
	%0x4 = load ptr %0x0
	%0x5 = call ptr @luaL_checklstring(%0x4:ptr, 1:i32, %0x3:ptr) bt label %L2
L2:	; pred=entry
	%2x0 = alloc ptr
	store ptr %2x0, ptr %0x5
	%2x2 = load ptr %0x0
	%2x3 = call i64 @luaL_checkinteger(%2x2:ptr, 2:i32) bt label %L3
L3:	; pred=L2
	%3x0 = alloc i64
	store ptr %3x0, i64 %2x3
	%3x2 = load i64 %3x0
	%3x3 = icmp ge i64 %3x2, 0
	br u1 %3x3 label %L4, label %L5 
L4:	; pred=L3
	br label %L6
L6:	; pred=L4, L5
	%6x0 = phi i64 [1: L4, %5x2: L5]
	%6x1 = alloc i64
	store ptr %6x1, i64 %6x0
	%6x3 = load ptr %0x0
	%6x4 = load i64 %6x1
	%6x5 = call i64 @luaL_optinteger(%6x3:ptr, 3:i32, %6x4:i64) bt label %L7
L7:	; pred=L6
	%7x0 = load u64 %0x3
	%7x1 = call i64 @u_posrelat(%6x5:i64, %7x0:u64) bt label %L8
L8:	; pred=L7
	store ptr %6x1, i64 %7x1
	%8x1 = load i64 %6x1
	%8x2 = icmp le i64 1, %8x1
	br u1 %8x2 label %L9, label %L10 
L9:	; pred=L8
	%9x0 = load i64 %6x1
	%9x1 = sub i64 %9x0, 1
	store ptr %6x1, i64 %9x1
	%9x3 = load u64 %0x3
	%9x4 = bitcast u64 %9x3 to i64
	%9x5 = icmp le i64 %9x1, %9x4
	%9x6 = flag2int u1 %9x5 to i8
	br label %L10
L10:	; pred=L8, L9
	%10x0 = phi i8 [0: L8, %9x6: L9]
	%10x1 = icmp ne i8 %10x0, 0
	br u1 %10x1 label %L12, label %L11 
L12:	; pred=L10, L13
	%12x0 = phi i8 [1: L10, %13x1: L13]
	%12x1 = load i64 %3x0
	%12x2 = icmp eq i64 %12x1, 0
	br u1 %12x2 label %L14, label %L15 
L14:	; pred=L12
	br label %L17
L17:	; pred=L14, L16
	%17x0 = load i64 %6x1
	%17x1 = icmp gt i64 %17x0, 0
	br u1 %17x1 label %L18, label %L19 
L18:	; pred=L17
	%18x0 = load ptr %2x0
	%18x1 = ptr2int ptr %18x0 to i64
	%18x2 = load i64 %6x1
	%18x3 = mul i64 %18x2, 1
	%18x4 = add i64 %18x1, %18x3
	%18x5 = int2ptr i64 %18x4 to ptr
	%18x6 = load i8 %18x5
	%18x7 = sext i8 %18x6 to i32
	%18x8 = and i32 %18x7, 192
	%18x9 = icmp eq i32 %18x8, 128
	%18x10 = flag2int u1 %18x9 to i8
	br label %L19
L19:	; pred=L17, L18
	%19x0 = phi i8 [0: L17, %18x10: L18]
	%19x1 = icmp ne i8 %19x0, 0
	br u1 %19x1 label %L16, label %L20 
L16:	; pred=L19
	%16x0 = load i64 %6x1
	%16x1 = sub i64 %16x0, 1
	store ptr %6x1, i64 %16x1
	br label %L17
L20:	; pred=L19
	br label %L21
L21:	; pred=L20, L37
	%21x0 = load i64 %3x0
	%21x1 = icmp ne i64 %21x0, 0
	br u1 %21x1 label %L46, label %L47 
L46:	; pred=L21
	%46x0 = load ptr %0x0
	call void @lua_pushnil(%46x0:ptr) bt label %L48
L48:	; pred=L46
	store ptr %0x2, i32 1
	br label %L1
L47:	; pred=L21
	%47x0 = load ptr %0x0
	%47x1 = load i64 %6x1
	%47x2 = add i64 %47x1, 1
	call void @lua_pushinteger(%47x0:ptr, %47x2:i64) bt label %L49
L49:	; pred=L47
	%49x0 = load i64 %6x1
	%49x1 = load ptr %2x0
	%49x2 = gep i8, ptr %49x1, i64 %49x0
	%49x3 = load i8 %49x2
	%49x4 = sext i8 %49x3 to i32
	%49x5 = and i32 %49x4, 128
	%49x6 = icmp ne i32 %49x5, 0
	br u1 %49x6 label %L50, label %L51 
L50:	; pred=L49
	br label %L52
L52:	; pred=L50, L53
	%52x0 = load i64 %6x1
	%52x1 = add i64 %52x0, 1
	store ptr %6x1, i64 %52x1
	br label %L53
L53:	; pred=L52
	%53x0 = load ptr %2x0
	%53x1 = ptr2int ptr %53x0 to i64
	%53x2 = load i64 %6x1
	%53x3 = mul i64 %53x2, 1
	%53x4 = add i64 %53x1, %53x3
	%53x5 = int2ptr i64 %53x4 to ptr
	%53x6 = ptr2int ptr %53x5 to i64
	%53x7 = mul i64 1, 1
	%53x8 = add i64 %53x6, %53x7
	%53x9 = int2ptr i64 %53x8 to ptr
	%53x10 = load i8 %53x9
	%53x11 = sext i8 %53x10 to i32
	%53x12 = and i32 %53x11, 192
	%53x13 = icmp eq i32 %53x12, 128
	br u1 %53x13 label %L52, label %L54 
L54:	; pred=L53
	br label %L51
L51:	; pred=L49, L54
	%51x0 = load ptr %0x0
	%51x1 = load i64 %6x1
	%51x2 = add i64 %51x1, 1
	call void @lua_pushinteger(%51x0:ptr, %51x2:i64) bt label %L55
L55:	; pred=L51
	store ptr %0x2, i32 2
	br label %L1
L15:	; pred=L12
	%15x0 = load ptr %2x0
	%15x1 = ptr2int ptr %15x0 to i64
	%15x2 = load i64 %6x1
	%15x3 = mul i64 %15x2, 1
	%15x4 = add i64 %15x1, %15x3
	%15x5 = int2ptr i64 %15x4 to ptr
	%15x6 = load i8 %15x5
	%15x7 = sext i8 %15x6 to i32
	%15x8 = and i32 %15x7, 192
	%15x9 = icmp eq i32 %15x8, 128
	br u1 %15x9 label %L22, label %L23 
L22:	; pred=L15
	%22x0 = load ptr %0x0
	%22x1 = call i32 @luaL_error(%22x0:ptr, @.str11:ptr) bt label %L24
L24:	; pred=L22
	store ptr %0x2, i32 %22x1
	br label %L1
L23:	; pred=L15
	%23x0 = load i64 %3x0
	%23x1 = icmp lt i64 %23x0, 0
	br u1 %23x1 label %L25, label %L26 
L25:	; pred=L23
	br label %L28
L28:	; pred=L25, L36
	%28x0 = load i64 %3x0
	%28x1 = icmp lt i64 %28x0, 0
	br u1 %28x1 label %L29, label %L30 
L29:	; pred=L28
	%29x0 = load i64 %6x1
	%29x1 = icmp gt i64 %29x0, 0
	%29x2 = flag2int u1 %29x1 to i8
	br label %L30
L30:	; pred=L28, L29
	%30x0 = phi i8 [0: L28, %29x2: L29]
	%30x1 = icmp ne i8 %30x0, 0
	br u1 %30x1 label %L27, label %L31 
L27:	; pred=L30
	br label %L32
L32:	; pred=L27, L35
	%32x0 = load i64 %6x1
	%32x1 = sub i64 %32x0, 1
	store ptr %6x1, i64 %32x1
	br label %L33
L33:	; pred=L32
	%33x0 = load i64 %6x1
	%33x1 = icmp gt i64 %33x0, 0
	br u1 %33x1 label %L34, label %L35 
L34:	; pred=L33
	%34x0 = load ptr %2x0
	%34x1 = ptr2int ptr %34x0 to i64
	%34x2 = load i64 %6x1
	%34x3 = mul i64 %34x2, 1
	%34x4 = add i64 %34x1, %34x3
	%34x5 = int2ptr i64 %34x4 to ptr
	%34x6 = load i8 %34x5
	%34x7 = sext i8 %34x6 to i32
	%34x8 = and i32 %34x7, 192
	%34x9 = icmp eq i32 %34x8, 128
	%34x10 = flag2int u1 %34x9 to i8
	br label %L35
L35:	; pred=L33, L34
	%35x0 = phi i8 [0: L33, %34x10: L34]
	%35x1 = icmp ne i8 %35x0, 0
	br u1 %35x1 label %L32, label %L36 
L36:	; pred=L35
	%36x0 = load i64 %3x0
	%36x1 = add i64 %36x0, 1
	store ptr %3x0, i64 %36x1
	br label %L28
L31:	; pred=L30
	br label %L37
L37:	; pred=L31, L42
	br label %L21
L26:	; pred=L23
	%26x0 = load i64 %3x0
	%26x1 = sub i64 %26x0, 1
	store ptr %3x0, i64 %26x1
	br label %L39
L39:	; pred=L26, L45
	%39x0 = load i64 %3x0
	%39x1 = icmp gt i64 %39x0, 0
	br u1 %39x1 label %L40, label %L41 
L40:	; pred=L39
	%40x0 = load i64 %6x1
	%40x1 = load u64 %0x3
	%40x2 = bitcast u64 %40x1 to i64
	%40x3 = icmp lt i64 %40x0, %40x2
	%40x4 = flag2int u1 %40x3 to i8
	br label %L41
L41:	; pred=L39, L40
	%41x0 = phi i8 [0: L39, %40x4: L40]
	%41x1 = icmp ne i8 %41x0, 0
	br u1 %41x1 label %L38, label %L42 
L38:	; pred=L41
	br label %L43
L43:	; pred=L38, L44
	%43x0 = load i64 %6x1
	%43x1 = add i64 %43x0, 1
	store ptr %6x1, i64 %43x1
	br label %L44
L44:	; pred=L43
	%44x0 = load ptr %2x0
	%44x1 = ptr2int ptr %44x0 to i64
	%44x2 = load i64 %6x1
	%44x3 = mul i64 %44x2, 1
	%44x4 = add i64 %44x1, %44x3
	%44x5 = int2ptr i64 %44x4 to ptr
	%44x6 = load i8 %44x5
	%44x7 = sext i8 %44x6 to i32
	%44x8 = and i32 %44x7, 192
	%44x9 = icmp eq i32 %44x8, 128
	br u1 %44x9 label %L43, label %L45 
L45:	; pred=L44
	%45x0 = load i64 %3x0
	%45x1 = sub i64 %45x0, 1
	store ptr %3x0, i64 %45x1
	br label %L39
L42:	; pred=L41
	br label %L37
L11:	; pred=L10
	%11x0 = load ptr %0x0
	%11x1 = call i32 @luaL_argerror(%11x0:ptr, 3:i32, @.str10:ptr) bt label %L13
L13:	; pred=L11
	%13x0 = icmp ne i32 %11x1, 0
	%13x1 = flag2int u1 %13x0 to i8
	br label %L12
L5:	; pred=L3
	%5x0 = load u64 %0x3
	%5x1 = bitcast u64 %5x0 to i64
	%5x2 = add i64 %5x1, 1
	br label %L6
L1:	; pred=L24, L48, L55
	%1x0 = load i32 %0x2
	ret i32 %1x0
}

define i32 @iter_aux(%arg0:ptr, %arg1:i32) !internal {
entry:	
	%0x0 = alloc ptr
	store ptr %0x0, ptr %arg0
	%0x2 = alloc i32
	store ptr %0x2, i32 %arg1
	%0x4 = alloc i32
	%0x5 = alloc u64
	%0x6 = load ptr %0x0
	%0x7 = call ptr @luaL_checklstring(%0x6:ptr, 1:i32, %0x5:ptr) bt label %L2
L2:	; pred=entry
	%2x0 = alloc ptr
	store ptr %2x0, ptr %0x7
	%2x2 = load ptr %0x0
	%2x3 = int2ptr i8 0 to ptr
	%2x4 = call i64 @lua_tointegerx(%2x2:ptr, 2:i32, %2x3:ptr) bt label %L3
L3:	; pred=L2
	%3x0 = bitcast i64 %2x4 to u64
	%3x1 = alloc u64
	store ptr %3x1, u64 %3x0
	%3x3 = load u64 %3x1
	%3x4 = load u64 %0x5
	%3x5 = icmp lt u64 %3x3, %3x4
	br u1 %3x5 label %L4, label %L5 
L4:	; pred=L3
	br label %L7
L7:	; pred=L4, L6
	%7x0 = load ptr %2x0
	%7x1 = ptr2int ptr %7x0 to i64
	%7x2 = load u64 %3x1
	%7x3 = bitcast u64 %7x2 to i64
	%7x4 = mul i64 %7x3, 1
	%7x5 = add i64 %7x1, %7x4
	%7x6 = int2ptr i64 %7x5 to ptr
	%7x7 = load i8 %7x6
	%7x8 = sext i8 %7x7 to i32
	%7x9 = and i32 %7x8, 192
	%7x10 = icmp eq i32 %7x9, 128
	br u1 %7x10 label %L6, label %L8 
L6:	; pred=L7
	%6x0 = load u64 %3x1
	%6x1 = add u64 %6x0, 1
	store ptr %3x1, u64 %6x1
	br label %L7
L8:	; pred=L7
	br label %L5
L5:	; pred=L3, L8
	%5x0 = load u64 %3x1
	%5x1 = load u64 %0x5
	%5x2 = icmp ge u64 %5x0, %5x1
	br u1 %5x2 label %L9, label %L10 
L9:	; pred=L5
	store ptr %0x4, i32 0
	br label %L1
L10:	; pred=L5
	%10x0 = alloc u32
	%10x1 = load ptr %2x0
	%10x2 = ptr2int ptr %10x1 to i64
	%10x3 = load u64 %3x1
	%10x4 = bitcast u64 %10x3 to i64
	%10x5 = mul i64 %10x4, 1
	%10x6 = add i64 %10x2, %10x5
	%10x7 = int2ptr i64 %10x6 to ptr
	%10x8 = load i32 %0x2
	%10x9 = call ptr @utf8_decode(%10x7:ptr, %10x0:ptr, %10x8:i32) bt label %L11
L11:	; pred=L10
	%11x0 = alloc ptr
	store ptr %11x0, ptr %10x9
	%11x2 = load ptr %11x0
	%11x3 = int2ptr i8 0 to ptr
	%11x4 = icmp eq ptr %11x2, %11x3
	br u1 %11x4 label %L13, label %L12 
L13:	; pred=L11, L12
	%13x0 = phi i8 [1: L11, %12x5: L12]
	%13x1 = icmp ne i8 %13x0, 0
	br u1 %13x1 label %L14, label %L15 
L14:	; pred=L13
	%14x0 = load ptr %0x0
	%14x1 = call i32 @luaL_error(%14x0:ptr, @.str12:ptr) bt label %L16
L16:	; pred=L14
	store ptr %0x4, i32 %14x1
	br label %L1
L15:	; pred=L13
	%15x0 = load ptr %0x0
	%15x1 = load u64 %3x1
	%15x2 = add u64 %15x1, 1
	%15x3 = bitcast u64 %15x2 to i64
	call void @lua_pushinteger(%15x0:ptr, %15x3:i64) bt label %L17
L17:	; pred=L15
	%17x0 = load ptr %0x0
	%17x1 = load u32 %10x0
	%17x2 = zext u32 %17x1 to u64
	%17x3 = bitcast u64 %17x2 to i64
	call void @lua_pushinteger(%17x0:ptr, %17x3:i64) bt label %L18
L18:	; pred=L17
	store ptr %0x4, i32 2
	br label %L1
L12:	; pred=L11
	%12x0 = load ptr %11x0
	%12x1 = load i8 %12x0
	%12x2 = sext i8 %12x1 to i32
	%12x3 = and i32 %12x2, 192
	%12x4 = icmp eq i32 %12x3, 128
	%12x5 = flag2int u1 %12x4 to i8
	br label %L13
L1:	; pred=L9, L16, L18
	%1x0 = load i32 %0x4
	ret i32 %1x0
}

define i32 @iter_auxstrict(%arg0:ptr) !internal {
entry:	
	%0x0 = alloc ptr
	store ptr %0x0, ptr %arg0
	%0x2 = alloc i32
	%0x3 = load ptr %0x0
	%0x4 = call i32 @iter_aux(%0x3:ptr, 1:i32) bt label %L2
L2:	; pred=entry
	store ptr %0x2, i32 %0x4
	br label %L1
L1:	; pred=L2
	%1x0 = load i32 %0x2
	ret i32 %1x0
}

define i32 @iter_auxlax(%arg0:ptr) !internal {
entry:	
	%0x0 = alloc ptr
	store ptr %0x0, ptr %arg0
	%0x2 = alloc i32
	%0x3 = load ptr %0x0
	%0x4 = call i32 @iter_aux(%0x3:ptr, 0:i32) bt label %L2
L2:	; pred=entry
	store ptr %0x2, i32 %0x4
	br label %L1
L1:	; pred=L2
	%1x0 = load i32 %0x2
	ret i32 %1x0
}

define i32 @iter_codes(%arg0:ptr) !internal {
entry:	
	%0x0 = alloc ptr
	store ptr %0x0, ptr %arg0
	%0x2 = alloc i32
	%0x3 = load ptr %0x0
	%0x4 = call i32 @lua_toboolean(%0x3:ptr, 2:i32) bt label %L2
L2:	; pred=entry
	%2x0 = alloc i32
	store ptr %2x0, i32 %0x4
	%2x2 = load ptr %0x0
	%2x3 = int2ptr i8 0 to ptr
	%2x4 = call ptr @luaL_checklstring(%2x2:ptr, 1:i32, %2x3:ptr) bt label %L3
L3:	; pred=L2
	%3x0 = alloc ptr
	store ptr %3x0, ptr %2x4
	%3x2 = load ptr %3x0
	%3x3 = load i8 %3x2
	%3x4 = sext i8 %3x3 to i32
	%3x5 = and i32 %3x4, 192
	%3x6 = icmp eq i32 %3x5, 128
	%3x7 = flag2int u1 %3x6 to i32
	%3x8 = icmp eq i32 %3x7, 0
	br u1 %3x8 label %L5, label %L4 
L5:	; pred=L3, L6
	%5x0 = phi i8 [1: L3, %6x1: L6]
	%5x1 = load ptr %0x0
	%5x2 = load i32 %2x0
	%5x3 = icmp ne i32 %5x2, 0
	br u1 %5x3 label %L7, label %L8 
L7:	; pred=L5
	br label %L9
L9:	; pred=L7, L8
	%9x0 = phi ptr [define i32 @iter_auxlax(ptr) !internal: L7, define i32 @iter_auxstrict(ptr) !internal: L8]
	call void @lua_pushcclosure(%5x1:ptr, %9x0:ptr, 0:i32) bt label %L10
L10:	; pred=L9
	%10x0 = load ptr %0x0
	call void @lua_pushvalue(%10x0:ptr, 1:i32) bt label %L11
L11:	; pred=L10
	%11x0 = load ptr %0x0
	call void @lua_pushinteger(%11x0:ptr, 0:i64) bt label %L12
L12:	; pred=L11
	store ptr %0x2, i32 3
	br label %L1
L8:	; pred=L5
	br label %L9
L4:	; pred=L3
	%4x0 = load ptr %0x0
	%4x1 = call i32 @luaL_argerror(%4x0:ptr, 1:i32, @.str13:ptr) bt label %L6
L6:	; pred=L4
	%6x0 = icmp ne i32 %4x1, 0
	%6x1 = flag2int u1 %6x0 to i8
	br label %L5
L1:	; pred=L12
	%1x0 = load i32 %0x2
	ret i32 %1x0
}

define i32 @luaopen_utf8(%arg0:ptr) !default {
entry:	
	%0x0 = alloc ptr
	store ptr %0x0, ptr %arg0
	%0x2 = alloc i32
	%0x3 = load ptr %0x0
	%0x4 = mul i32 5, 100
	%0x5 = add i32 %0x4, 5
	%0x6 = int2fp i32 %0x5 to f64
	%0x7 = mul i32 8, 16
	%0x8 = add i32 %0x7, 8
	%0x9 = sext i32 %0x8 to i64
	%0x10 = bitcast i64 %0x9 to u64
	call void @luaL_checkversion_(%0x3:ptr, %0x6:f64, %0x10:u64) bt label %L2
L2:	; pred=entry
	%2x0 = load ptr %0x0
	%2x1 = div |i32, i32|, i32 112, i32 16
	%2x2 = proj |i32, i32| %2x1, 0
	%2x3 = proj |i32, i32| %2x1, 1
	%2x4 = sub i32 %2x2, 1
	call void @lua_createtable(%2x0:ptr, 0:i32, %2x4:i32) bt label %L3
L3:	; pred=L2
	%3x0 = load ptr %0x0
	%3x1 = gep $luaL_Reg, ptr @.funcs.static20, i64 0
	call void @luaL_setfuncs(%3x0:ptr, %3x1:ptr, 0:i32) bt label %L4
L4:	; pred=L3
	%4x0 = load ptr %0x0
	%4x1 = div |i32, i32|, i32 30, i32 1
	%4x2 = proj |i32, i32| %4x1, 0
	%4x3 = proj |i32, i32| %4x1, 1
	%4x4 = sub i32 %4x2, 1
	%4x5 = sext i32 %4x4 to i64
	%4x6 = bitcast i64 %4x5 to u64
	%4x7 = call ptr @lua_pushlstring(%4x0:ptr, @.str21:ptr, %4x6:u64) bt label %L5
L5:	; pred=L4
	%5x0 = load ptr %0x0
	%5x1 = neg i32 2
	call void @lua_setfield(%5x0:ptr, %5x1:i32, @.str22:ptr) bt label %L6
L6:	; pred=L5
	store ptr %0x2, i32 1
	br label %L1
L1:	; pred=L6
	%1x0 = load i32 %0x2
	ret i32 %1x0
}
